{"ast":null,"code":"import api from '@/services/api';\nexport default {\n  name: 'App',\n  data() {\n    // Get stored values\n    const storedUserId = localStorage.getItem('userId') || '';\n    const storedEmail = localStorage.getItem('email') || '';\n    let storedStatus = localStorage.getItem('userStatus') || '';\n    return {\n      pendingUsers: [],\n      showNotifications: false,\n      showEmployeeMenu: false,\n      // เพิ่มตัวแปรสำหรับควบคุมการแสดงเมนูย่อย\n      showUserDetails: false,\n      // เพิ่มตัวแปรสำหรับควบคุมการแสดง/ซ่อนข้อมูลส่วนตัว\n      loading: false,\n      userId: storedUserId,\n      userEmail: storedEmail,\n      userStatus: storedStatus,\n      userFullName: 'Natcha Boonmee',\n      userPhone: '0835364833',\n      userAddress: 'Rmutt',\n      profileImageUrl: '',\n      pendingUsersInterval: null // เพิ่มตัวแปรสำหรับเก็บ interval ID\n    };\n  },\n  computed: {\n    isLoggedIn() {\n      return !!localStorage.getItem('token');\n    },\n    isHeadmanOrAssistant() {\n      const status = localStorage.getItem('userStatus');\n      return status === 'headman' || status === 'assistant';\n    },\n    isLoginPage() {\n      return this.$route && this.$route.path === '/login';\n    },\n    isRegisterPage() {\n      return this.$route && this.$route.path === '/register';\n    }\n  },\n  methods: {\n    formatRole(role) {\n      if (!role) return 'User';\n      return role.charAt(0).toUpperCase() + role.slice(1);\n    },\n    isValidStatus(status) {\n      // Check if status is one of the valid statuses\n      return ['headman', 'assistant', 'villager'].includes(status);\n    },\n    toggleNotifications() {\n      this.showNotifications = !this.showNotifications;\n    },\n    toggleEmployeeMenu() {\n      this.showEmployeeMenu = !this.showEmployeeMenu;\n    },\n    toggleUserDetails() {\n      this.showUserDetails = !this.showUserDetails;\n    },\n    async fetchPendingUsers() {\n      const isLoggedIn = !!localStorage.getItem('token');\n      const userStatus = localStorage.getItem('userStatus');\n      const isHeadmanOrAssistant = userStatus === 'headman' || userStatus === 'assistant';\n      if (!isLoggedIn || !isHeadmanOrAssistant) return;\n      try {\n        this.loading = true;\n        console.log('Fetching pending users...');\n\n        // ดึงข้อมูลผู้ใช้ที่รอการอนุมัติ\n        const response = await api.getPendingUsers();\n        let pendingUsers = response.data.pendingUsers || [];\n        console.log('Pending users from API:', pendingUsers);\n\n        // ดึงข้อมูลผู้ใช้ทั้งหมดเพื่อหาผู้ใช้ที่มีสถานะ pending\n        try {\n          const allUsersResponse = await api.getAllUsers();\n          if (allUsersResponse.data && allUsersResponse.data.users) {\n            // กรองผู้ใช้ที่มีสถานะ pending\n            const pendingStatusUsers = allUsersResponse.data.users.filter(user => user.status === 'pending');\n            console.log('Users with pending status:', pendingStatusUsers);\n\n            // รวมรายการผู้ใช้ที่รอการอนุมัติ โดยหลีกเลี่ยงการซ้ำกัน\n            const combinedUsers = [...pendingUsers];\n            pendingStatusUsers.forEach(user => {\n              // ตรวจสอบว่าผู้ใช้นี้มีอยู่ในรายการรวมแล้วหรือไม่\n              const isDuplicate = combinedUsers.some(existingUser => existingUser.user_id === user.user_id);\n\n              // ถ้าไม่ซ้ำ ให้เพิ่มเข้าไปในรายการรวม\n              if (!isDuplicate) {\n                combinedUsers.push(user);\n              }\n            });\n            this.pendingUsers = combinedUsers;\n            console.log('Combined pending users:', this.pendingUsers);\n          }\n        } catch (allUsersError) {\n          console.error('Error fetching all users:', allUsersError);\n          // ถ้าไม่สามารถดึงข้อมูลผู้ใช้ทั้งหมดได้ ให้ใช้ข้อมูลจาก pendingUsers เท่านั้น\n          this.pendingUsers = pendingUsers;\n        }\n\n        // ถ้ายังไม่มีข้อมูล ให้ลองดึงจำนวนผู้ใช้ที่รอการอนุมัติ\n        if (this.pendingUsers.length === 0) {\n          try {\n            const countResponse = await api.getPendingUsersCount();\n            console.log('Pending users count:', countResponse.data);\n            if (countResponse.data && countResponse.data.count > 0) {\n              console.log('Count shows pending users but list is empty, fetching again...');\n              // ลองเรียก getPendingUsers อีกครั้ง\n              const retryResponse = await api.getPendingUsers();\n              this.pendingUsers = retryResponse.data.pendingUsers || [];\n              console.log('Retry pending users:', this.pendingUsers);\n            }\n          } catch (countError) {\n            console.error('Error fetching pending users count:', countError);\n          }\n        }\n      } catch (error) {\n        console.error('Error in main fetchPendingUsers:', error);\n      } finally {\n        this.loading = false;\n        console.log('Final pending users list:', this.pendingUsers);\n      }\n    },\n    async approveUser(userId) {\n      // Find the user to check their status\n      const userToApprove = this.pendingUsers.find(user => user.user_id === userId);\n      if (!userToApprove) {\n        alert('ไม่พบข้อมูลผู้ใช้');\n        return;\n      }\n\n      // Check if user has a valid status\n      if (!this.isValidStatus(userToApprove.status)) {\n        alert('ไม่สามารถอนุมัติผู้ใช้ได้ เนื่องจากสถานะไม่ถูกต้อง กรุณาแก้ไขสถานะให้เป็น headman, assistant หรือ villager ก่อน');\n        return;\n      }\n      try {\n        await api.approveUser(userId);\n        // Remove the approved user from the list\n        this.pendingUsers = this.pendingUsers.filter(user => user.user_id !== userId);\n        // Emit event to refresh data if needed\n        this.$emit('user-approved');\n        alert('อนุมัติผู้ใช้เรียบร้อยแล้ว');\n      } catch (error) {\n        console.error('Error approving user:', error);\n        alert('ไม่สามารถอนุมัติผู้ใช้ได้ กรุณาลองอีกครั้ง');\n      }\n    },\n    logout() {\n      // ดึง userId จาก localStorage\n      const userId = localStorage.getItem('userId');\n\n      // Save profile picture URL before clearing localStorage\n      // ใช้ userId ในการดึงรูปภาพเพื่อไม่ให้ปะปนกัน\n      const profilePictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n\n      // Clear all localStorage items except profile picture\n      localStorage.clear();\n\n      // If we had a profile picture and it's a base64 image, save it to sessionStorage\n      // This will persist until the browser tab is closed\n      if (userId && profilePictureUrl && profilePictureUrl.startsWith('data:image/')) {\n        // เก็บรูปภาพแยกตาม userId เพื่อไม่ให้ปะปนกัน\n        sessionStorage.setItem(`lastProfilePicture_${userId}`, profilePictureUrl);\n        console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\n      }\n\n      // Reset app state\n      this.showNotifications = false;\n      this.pendingUsers = [];\n      this.userId = '';\n      this.userEmail = '';\n      this.userStatus = '';\n      this.userFullName = '';\n      this.userPhone = '';\n      this.userAddress = '';\n\n      // Force navigation to login page\n      window.location.href = '/login';\n    },\n    // Add debounce to prevent too frequent API calls\n    _fetchUserProfileDebounced: null,\n    async fetchUserProfile() {\n      // If we already have a pending request, don't make another one\n      if (this._fetchUserProfileDebounced) {\n        console.log('Skipping duplicate profile fetch request');\n        return;\n      }\n\n      // Set a flag to prevent duplicate requests\n      this._fetchUserProfileDebounced = true;\n\n      // Clear the flag after 2 seconds\n      setTimeout(() => {\n        this._fetchUserProfileDebounced = null;\n      }, 2000);\n      try {\n        console.log('Fetching user profile...');\n\n        // ดึง userId จาก localStorage\n        const userId = localStorage.getItem('userId');\n\n        // First check for profile picture in localStorage (base64 data) before API call\n        // This ensures we have an image to display immediately\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          console.log(`Using profile picture from localStorage for user ID: ${userId}`);\n          this.profileImageUrl = storedPictureUrl;\n        }\n        // If no localStorage image, check sessionStorage for last profile picture\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n          console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n          this.profileImageUrl = lastPicture;\n          // Also save it back to localStorage for future use\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n        }\n\n        // Now fetch the user profile from the API\n        const response = await api.getUserProfile();\n        const user = response.data.user;\n        console.log('User profile data:', user);\n        if (user) {\n          this.userEmail = user.user_email || this.userEmail;\n          this.userStatus = user.status || this.userStatus;\n          this.userFullName = user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : this.userFullName;\n          this.userPhone = user.phone || this.userPhone;\n          this.userAddress = user.address || this.userAddress;\n\n          // ถ้ามีรูปภาพจาก API และไม่มีรูปภาพใน localStorage\n          if (user.profile_picture && (!storedPictureUrl || !storedPictureUrl.startsWith('data:image/'))) {\n            console.log('Profile picture found in API response:', user.profile_picture);\n\n            // ถ้าเป็น URL ภายนอก (เช่น randomuser.me) ใช้โดยตรง\n            if (user.profile_picture.startsWith('http')) {\n              this.profileImageUrl = user.profile_picture;\n            } else {\n              // สำหรับ URL ของเซิร์ฟเวอร์ เพิ่ม timestamp และใช้ path แบบสัมพัทธ์\n              const timestamp = new Date().getTime();\n              const serverUrl = `${user.profile_picture}?t=${timestamp}`;\n              this.profileImageUrl = serverUrl;\n\n              // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\n              localStorage.setItem(`serverProfilePictureUrl_${userId}`, user.profile_picture);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n\n        // Even if API fails, try to use stored images\n        const userId = localStorage.getItem('userId');\n\n        // Try localStorage first\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          console.log(`Using profile picture from localStorage after API error for user ID: ${userId}`);\n          this.profileImageUrl = storedPictureUrl;\n        }\n        // Then try sessionStorage\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n          console.log(`Using last profile picture from sessionStorage after API error for user ID: ${userId}`);\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n          this.profileImageUrl = lastPicture;\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n        }\n        // ถ้าไม่มีรูปภาพใน localStorage หรือ sessionStorage ให้ใช้รูปภาพจาก serverProfilePictureUrl\n        else {\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n          if (serverPictureUrl) {\n            const timestamp = new Date().getTime();\n            this.profileImageUrl = `${serverPictureUrl}?t=${timestamp}`;\n          }\n        }\n      }\n    },\n    getFullImageUrl(url) {\n      // ดึง userId จาก localStorage\n      const userId = localStorage.getItem('userId');\n\n      // ถ้าไม่มี userId ให้ใช้ URL ที่ได้รับ\n      if (!userId) {\n        console.log('No userId found in localStorage');\n        return url || '';\n      }\n\n      // ถ้าไม่มี URL ให้ลองดึงจาก localStorage\n      if (!url) {\n        console.log('No URL provided, trying to get from localStorage');\n\n        // ลองดึงจาก localStorage ก่อน\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          console.log(`Found profile picture in localStorage for user ID: ${userId}`);\n          return storedPictureUrl;\n        }\n\n        // ถ้าไม่มีใน localStorage ให้ลองดึงจาก sessionStorage\n        const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n        if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\n          console.log(`Found profile picture in sessionStorage for user ID: ${userId}`);\n          // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\n          return lastProfilePicture;\n        }\n\n        // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ลองดึงจาก serverProfilePictureUrl\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n        if (serverPictureUrl) {\n          console.log(`Found server profile picture URL for user ID: ${userId}`);\n          const timestamp = new Date().getTime();\n          return `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\n        }\n        console.log('No profile picture found in any storage');\n        return '';\n      }\n\n      // ถ้ามี URL ให้ตรวจสอบว่าเป็น URL ประเภทใด\n\n      // If it's a data URL (base64), return as is\n      if (url.startsWith('data:')) {\n        return url;\n      }\n\n      // If it's a relative URL, prepend the API base URL\n      if (url.startsWith('/')) {\n        // Add a timestamp to prevent caching\n        const timestamp = new Date().getTime();\n        // Use the correct API URL\n        return `http://localhost:4000${url}?t=${timestamp}`;\n      }\n\n      // If it's an https URL (like picsum.photos), return as is\n      if (url.startsWith('http')) {\n        return url;\n      }\n\n      // Otherwise, return the URL as is\n      return url;\n    },\n    handleImageError(e) {\n      console.log('Image error occurred for:', e.target.src);\n\n      // Prevent infinite loop by checking if the image has already been processed\n      if (e.target.dataset.errorHandled) {\n        console.log('Image already handled, using placeholder');\n        // If we've already tried to handle this error, just use the placeholder\n        e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\n        return;\n      }\n\n      // Mark this image as being processed to prevent infinite loops\n      e.target.dataset.errorHandled = 'true';\n\n      // ดึง userId จาก localStorage\n      const userId = localStorage.getItem('userId');\n      if (!userId) {\n        console.log('No userId found in localStorage');\n        e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\n        return;\n      }\n      console.log('Trying to recover image for userId:', userId);\n\n      // Try to use stored base64 image if available in localStorage\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n        console.log('Using image from localStorage');\n        e.target.src = storedPictureUrl;\n        // Update the profileImageUrl property\n        this.profileImageUrl = storedPictureUrl;\n        return;\n      }\n\n      // Try to use stored base64 image from sessionStorage if available\n      const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n      if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\n        console.log('Using image from sessionStorage');\n        e.target.src = lastProfilePicture;\n        // Also save it back to localStorage for future use\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\n        // Update the profileImageUrl property\n        this.profileImageUrl = lastProfilePicture;\n        return;\n      }\n\n      // Try to use server URL if available\n      const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n      if (serverPictureUrl) {\n        console.log('Using server URL:', serverPictureUrl);\n        const timestamp = new Date().getTime();\n        const fullUrl = `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\n        e.target.src = fullUrl;\n        // Update the profileImageUrl property\n        this.profileImageUrl = fullUrl;\n        return;\n      }\n\n      // If all else fails, fall back to placeholder\n      console.log('All recovery attempts failed, using placeholder');\n      e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\n      // Update the profileImageUrl property\n      this.profileImageUrl = '';\n    }\n  },\n  watch: {\n    isLoggedIn(newVal) {\n      if (newVal) {\n        // Update user status from localStorage\n        this.userStatus = localStorage.getItem('userStatus') || '';\n        this.fetchPendingUsers();\n      }\n    },\n    // Watch for route changes to update user status and pending users\n    '$route'() {\n      if (this.isLoggedIn) {\n        this.userStatus = localStorage.getItem('userStatus') || '';\n        // เรียกใช้ fetchPendingUsers เมื่อมีการเปลี่ยนเส้นทาง\n        if (this.userStatus === 'headman' || this.userStatus === 'assistant') {\n          this.fetchPendingUsers();\n        }\n      }\n    }\n  },\n  mounted() {\n    console.log('App component mounted');\n\n    // Force check login status\n    const token = localStorage.getItem('token');\n\n    // Update user status from localStorage\n    this.userStatus = localStorage.getItem('userStatus') || '';\n\n    // ดึง userId จาก localStorage\n    const userId = localStorage.getItem('userId');\n    console.log('User ID from localStorage:', userId);\n\n    // Try to load profile image from localStorage immediately\n    if (userId) {\n      console.log('Attempting to load profile image for user ID:', userId);\n\n      // First check localStorage for base64 image\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n        console.log('Found profile image in localStorage');\n        this.profileImageUrl = storedPictureUrl;\n      }\n      // Then check sessionStorage\n      else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n        console.log('Found profile image in sessionStorage');\n        const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n        this.profileImageUrl = lastPicture;\n        // Save to localStorage for future use\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n      }\n      // Then check server URL\n      else {\n        console.log('Checking for server profile picture URL');\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n        if (serverPictureUrl) {\n          console.log('Found server profile picture URL:', serverPictureUrl);\n          const timestamp = new Date().getTime();\n          this.profileImageUrl = `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\n        } else {\n          console.log('No profile image found in any storage');\n        }\n      }\n    } else {\n      console.log('No user ID found in localStorage');\n    }\n    if (token) {\n      console.log('User is logged in, fetching profile data');\n\n      // Fetch user data if logged in - with a slight delay to ensure UI is responsive first\n      setTimeout(() => {\n        this.fetchUserProfile();\n      }, 100);\n\n      // ตรวจสอบว่าเป็น headman หรือ assistant หรือไม่\n      const userStatus = localStorage.getItem('userStatus');\n      if (userStatus === 'headman' || userStatus === 'assistant') {\n        // ดึงข้อมูลผู้ใช้ที่รอการอนุมัติทันที - with a slight delay\n        setTimeout(() => {\n          this.fetchPendingUsers();\n        }, 200);\n\n        // ตั้งค่าให้ดึงข้อมูลผู้ใช้ที่รอการอนุมัติทุก 30 วินาที\n        this.pendingUsersInterval = setInterval(() => {\n          this.fetchPendingUsers();\n        }, 30000); // 30 วินาที\n      }\n\n      // Set up event listener for profile updates\n      this.profileUpdateHandler = () => {\n        console.log('Profile updated event received');\n\n        // Always reload the profile image from localStorage first\n        if (userId) {\n          const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n          if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n            console.log('Using profile image from localStorage after update');\n            this.profileImageUrl = storedPictureUrl;\n          }\n        }\n\n        // Then fetch the latest profile data\n        this.fetchUserProfile();\n      };\n      window.addEventListener('profile-updated', this.profileUpdateHandler);\n\n      // Force update user status\n      if (userStatus) {\n        this.userStatus = userStatus;\n      }\n    } else if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\n      // Redirect to login if not logged in and not already on login/register page\n      console.log('User not logged in, redirecting to login page');\n      window.location.href = '/login';\n    }\n  },\n  beforeUnmount() {\n    console.log('App component will be unmounted');\n\n    // ทำความสะอาดตัวจับเวลาและตัวฟังก์ชันเมื่อคอมโพเนนต์ถูกทำลาย\n    if (this.pendingUsersInterval) {\n      console.log('Clearing pending users interval');\n      clearInterval(this.pendingUsersInterval);\n    }\n    if (this.profileUpdateHandler) {\n      console.log('Removing profile update event listener');\n      window.removeEventListener('profile-updated', this.profileUpdateHandler);\n    }\n  },\n  beforeDestroy() {\n    // ล้าง interval เมื่อ component ถูกทำลาย\n    if (this.pendingUsersInterval) {\n      clearInterval(this.pendingUsersInterval);\n    }\n\n    // Clean up event listener\n    window.removeEventListener('profile-updated', this.fetchUserProfile);\n  }\n};","map":{"version":3,"names":["api","name","data","storedUserId","localStorage","getItem","storedEmail","storedStatus","pendingUsers","showNotifications","showEmployeeMenu","showUserDetails","loading","userId","userEmail","userStatus","userFullName","userPhone","userAddress","profileImageUrl","pendingUsersInterval","computed","isLoggedIn","isHeadmanOrAssistant","status","isLoginPage","$route","path","isRegisterPage","methods","formatRole","role","charAt","toUpperCase","slice","isValidStatus","includes","toggleNotifications","toggleEmployeeMenu","toggleUserDetails","fetchPendingUsers","console","log","response","getPendingUsers","allUsersResponse","getAllUsers","users","pendingStatusUsers","filter","user","combinedUsers","forEach","isDuplicate","some","existingUser","user_id","push","allUsersError","error","length","countResponse","getPendingUsersCount","count","retryResponse","countError","approveUser","userToApprove","find","alert","$emit","logout","profilePictureUrl","clear","startsWith","sessionStorage","setItem","window","location","href","_fetchUserProfileDebounced","fetchUserProfile","setTimeout","storedPictureUrl","lastPicture","getUserProfile","user_email","first_name","last_name","phone","address","profile_picture","timestamp","Date","getTime","serverUrl","serverPictureUrl","getFullImageUrl","url","lastProfilePicture","handleImageError","e","target","src","dataset","errorHandled","fullUrl","watch","newVal","mounted","token","setInterval","profileUpdateHandler","addEventListener","pathname","beforeUnmount","clearInterval","removeEventListener","beforeDestroy"],"sources":["C:\\Users\\HP\\Documents\\mooban4\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"app-container\" v-if=\"isLoggedIn && !isLoginPage && !isRegisterPage\">\r\n      <!-- Vertical sidebar navigation -->\r\n      <div class=\"sidebar-nav\">\r\n        <div class=\"sidebar-profile\">\r\n          <div class=\"profile-image\">\r\n            <!-- ใช้ getFullImageUrl สำหรับโหลดรูปจาก backend -->\r\n            <img :src=\"getFullImageUrl(profileImageUrl) || 'https://via.placeholder.com/256x256?text=Profile'\" alt=\"Profile Image\" @error=\"handleImageError\">\r\n          </div>\r\n          <div class=\"profile-info\">\r\n            <h3>{{ userFullName || userEmail || 'Natcha Boonmee' }}</h3>\r\n            <span class=\"user-role\" :class=\"'role-' + userStatus\">{{ formatRole(userStatus) }}</span>\r\n\r\n\r\n            <!-- ข้อมูลส่วนตัวที่ซ่อนไว้ -->\r\n            <div class=\"user-details\" v-show=\"showUserDetails\">\r\n              <div class=\"info-item\" v-if=\"userId\">\r\n                <span class=\"info-label\">User ID:</span>\r\n                <span class=\"info-value\">{{ userId }}</span>\r\n              </div>\r\n              <div class=\"info-item\" v-if=\"userEmail\">\r\n                <span class=\"info-label\">Email:</span>\r\n                <span class=\"info-value\">{{ userEmail }}</span>\r\n              </div>\r\n              <div class=\"info-item\" v-if=\"userPhone\">\r\n                <span class=\"info-label\">Phone:</span>\r\n                <span class=\"info-value\">{{ userPhone }}</span>\r\n              </div>\r\n              <div class=\"info-item\" v-if=\"userAddress\">\r\n                <span class=\"info-label\">Address:</span>\r\n                <span class=\"info-value\">{{ userAddress }}</span>\r\n              </div>\r\n            </div>\r\n            <router-link to=\"/profile\" class=\"profile-btn edit-profile-btn\">แก้ไขโปรไฟล์</router-link>\r\n          </div>\r\n        </div>\r\n        <div class=\"sidebar-divider\"></div>\r\n        <div class=\"sidebar-menu\">\r\n          <router-link to=\"/\" class=\"sidebar-menu-item\"><span class=\"menu-emoji\">🏠</span> หน้าหลัก</router-link>\r\n\r\n          <!-- เมนูข้อมูลพนักงานแบบเลื่อนลง -->\r\n          <div class=\"dropdown-menu\">\r\n            <div class=\"dropdown-header\" @click=\"toggleEmployeeMenu\">\r\n              <span><span class=\"menu-emoji\">👥</span> ข้อมูลพนักงาน</span>\r\n              <i class=\"dropdown-icon\" :class=\"{'dropdown-icon-open': showEmployeeMenu}\">▼</i>\r\n            </div>\r\n            <div class=\"dropdown-content\" v-show=\"showEmployeeMenu\">\r\n              <router-link v-if=\"userStatus === 'headman' || userStatus === 'assistant'\" to=\"/pending-users\" class=\"sidebar-menu-item submenu-item\"><span class=\"menu-emoji\">⏳</span> รายการรออนุมัติ</router-link>\r\n              <router-link v-if=\"userStatus === 'headman' || userStatus === 'assistant'\" to=\"/all-users\" class=\"sidebar-menu-item submenu-item\"><span class=\"menu-emoji\">👤</span> จัดการผู้ใช้งาน</router-link>\r\n              <router-link to=\"/dashboard\" class=\"sidebar-menu-item submenu-item\"><span class=\"menu-emoji\">📊</span> แดชบอร์ด</router-link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Main content area with top navigation -->\r\n      <div class=\"main-content-area\">\r\n        <nav class=\"top-nav\">\r\n          <div class=\"nav-container\">\r\n            <div class=\"nav-left\">\r\n              <h2>Village Management System</h2>\r\n            </div>\r\n            <div class=\"nav-right\">\r\n              <div class=\"notification-container\" v-if=\"userStatus === 'headman' || userStatus === 'assistant'\">\r\n                <button class=\"notification-btn\" @click=\"toggleNotifications\">\r\n                  Pending Approvals {{ pendingUsers.length > 0 ? '(' + pendingUsers.length + ')' : '' }}\r\n                </button>\r\n                <div class=\"notification-dropdown\" v-if=\"showNotifications\">\r\n                  <h3>Pending Users</h3>\r\n                  <div v-if=\"pendingUsers.length > 0\">\r\n                    <div v-for=\"user in pendingUsers\" :key=\"user.user_id\" class=\"pending-user\">\r\n                      <div>\r\n                        <strong>{{ user.first_name }} {{ user.last_name }}</strong>\r\n                        <div>{{ user.user_email }}</div>\r\n                        <div>Status: {{ user.status }}</div>\r\n                      </div>\r\n                      <button class=\"approve-btn\" @click=\"approveUser(user.user_id)\" :disabled=\"!isValidStatus(user.status)\">Approve</button>\r\n                    </div>\r\n                  </div>\r\n                  <div v-else class=\"no-pending\">\r\n                    ไม่มีผู้ใช้ที่รอการอนุมัติ\r\n                  </div>\r\n                  <div class=\"dropdown-footer\">\r\n                    <router-link to=\"/pending-users\" class=\"view-all-btn\" @click=\"showNotifications = false\">View All Pending Users</router-link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button class=\"logout-btn\" @click=\"logout\">Logout</button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div class=\"content-wrapper\">\r\n          <router-view @user-approved=\"fetchPendingUsers\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <router-view v-else-if=\"isLoginPage || isRegisterPage\" @user-approved=\"fetchPendingUsers\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/services/api';\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    // Get stored values\r\n    const storedUserId = localStorage.getItem('userId') || '';\r\n    const storedEmail = localStorage.getItem('email') || '';\r\n    let storedStatus = localStorage.getItem('userStatus') || '';\r\n\r\n    return {\r\n      pendingUsers: [],\r\n      showNotifications: false,\r\n      showEmployeeMenu: false, // เพิ่มตัวแปรสำหรับควบคุมการแสดงเมนูย่อย\r\n      showUserDetails: false, // เพิ่มตัวแปรสำหรับควบคุมการแสดง/ซ่อนข้อมูลส่วนตัว\r\n      loading: false,\r\n      userId: storedUserId,\r\n      userEmail: storedEmail,\r\n      userStatus: storedStatus,\r\n      userFullName: 'Natcha Boonmee',\r\n      userPhone: '0835364833',\r\n      userAddress: 'Rmutt',\r\n      profileImageUrl: '',\r\n      pendingUsersInterval: null // เพิ่มตัวแปรสำหรับเก็บ interval ID\r\n    };\r\n  },\r\n  computed: {\r\n    isLoggedIn() {\r\n      return !!localStorage.getItem('token');\r\n    },\r\n    isHeadmanOrAssistant() {\r\n      const status = localStorage.getItem('userStatus');\r\n      return status === 'headman' || status === 'assistant';\r\n    },\r\n    isLoginPage() {\r\n      return this.$route && this.$route.path === '/login';\r\n    },\r\n    isRegisterPage() {\r\n      return this.$route && this.$route.path === '/register';\r\n    }\r\n  },\r\n  methods: {\r\n    formatRole(role) {\r\n      if (!role) return 'User';\r\n      return role.charAt(0).toUpperCase() + role.slice(1);\r\n    },\r\n    isValidStatus(status) {\r\n      // Check if status is one of the valid statuses\r\n      return ['headman', 'assistant', 'villager'].includes(status);\r\n    },\r\n    toggleNotifications() {\r\n      this.showNotifications = !this.showNotifications;\r\n    },\r\n    toggleEmployeeMenu() {\r\n      this.showEmployeeMenu = !this.showEmployeeMenu;\r\n    },\r\n    toggleUserDetails() {\r\n      this.showUserDetails = !this.showUserDetails;\r\n    },\r\n    async fetchPendingUsers() {\r\n      const isLoggedIn = !!localStorage.getItem('token');\r\n      const userStatus = localStorage.getItem('userStatus');\r\n      const isHeadmanOrAssistant = userStatus === 'headman' || userStatus === 'assistant';\r\n\r\n      if (!isLoggedIn || !isHeadmanOrAssistant) return;\r\n\r\n      try {\r\n        this.loading = true;\r\n        console.log('Fetching pending users...');\r\n\r\n        // ดึงข้อมูลผู้ใช้ที่รอการอนุมัติ\r\n        const response = await api.getPendingUsers();\r\n        let pendingUsers = response.data.pendingUsers || [];\r\n        console.log('Pending users from API:', pendingUsers);\r\n\r\n        // ดึงข้อมูลผู้ใช้ทั้งหมดเพื่อหาผู้ใช้ที่มีสถานะ pending\r\n        try {\r\n          const allUsersResponse = await api.getAllUsers();\r\n          if (allUsersResponse.data && allUsersResponse.data.users) {\r\n            // กรองผู้ใช้ที่มีสถานะ pending\r\n            const pendingStatusUsers = allUsersResponse.data.users.filter(user =>\r\n              user.status === 'pending'\r\n            );\r\n\r\n            console.log('Users with pending status:', pendingStatusUsers);\r\n\r\n            // รวมรายการผู้ใช้ที่รอการอนุมัติ โดยหลีกเลี่ยงการซ้ำกัน\r\n            const combinedUsers = [...pendingUsers];\r\n\r\n            pendingStatusUsers.forEach(user => {\r\n              // ตรวจสอบว่าผู้ใช้นี้มีอยู่ในรายการรวมแล้วหรือไม่\r\n              const isDuplicate = combinedUsers.some(existingUser =>\r\n                existingUser.user_id === user.user_id\r\n              );\r\n\r\n              // ถ้าไม่ซ้ำ ให้เพิ่มเข้าไปในรายการรวม\r\n              if (!isDuplicate) {\r\n                combinedUsers.push(user);\r\n              }\r\n            });\r\n\r\n            this.pendingUsers = combinedUsers;\r\n            console.log('Combined pending users:', this.pendingUsers);\r\n          }\r\n        } catch (allUsersError) {\r\n          console.error('Error fetching all users:', allUsersError);\r\n          // ถ้าไม่สามารถดึงข้อมูลผู้ใช้ทั้งหมดได้ ให้ใช้ข้อมูลจาก pendingUsers เท่านั้น\r\n          this.pendingUsers = pendingUsers;\r\n        }\r\n\r\n        // ถ้ายังไม่มีข้อมูล ให้ลองดึงจำนวนผู้ใช้ที่รอการอนุมัติ\r\n        if (this.pendingUsers.length === 0) {\r\n          try {\r\n            const countResponse = await api.getPendingUsersCount();\r\n            console.log('Pending users count:', countResponse.data);\r\n\r\n            if (countResponse.data && countResponse.data.count > 0) {\r\n              console.log('Count shows pending users but list is empty, fetching again...');\r\n              // ลองเรียก getPendingUsers อีกครั้ง\r\n              const retryResponse = await api.getPendingUsers();\r\n              this.pendingUsers = retryResponse.data.pendingUsers || [];\r\n              console.log('Retry pending users:', this.pendingUsers);\r\n            }\r\n          } catch (countError) {\r\n            console.error('Error fetching pending users count:', countError);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in main fetchPendingUsers:', error);\r\n      } finally {\r\n        this.loading = false;\r\n        console.log('Final pending users list:', this.pendingUsers);\r\n      }\r\n    },\r\n    async approveUser(userId) {\r\n      // Find the user to check their status\r\n      const userToApprove = this.pendingUsers.find(user => user.user_id === userId);\r\n\r\n      if (!userToApprove) {\r\n        alert('ไม่พบข้อมูลผู้ใช้');\r\n        return;\r\n      }\r\n\r\n      // Check if user has a valid status\r\n      if (!this.isValidStatus(userToApprove.status)) {\r\n        alert('ไม่สามารถอนุมัติผู้ใช้ได้ เนื่องจากสถานะไม่ถูกต้อง กรุณาแก้ไขสถานะให้เป็น headman, assistant หรือ villager ก่อน');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await api.approveUser(userId);\r\n        // Remove the approved user from the list\r\n        this.pendingUsers = this.pendingUsers.filter(user => user.user_id !== userId);\r\n        // Emit event to refresh data if needed\r\n        this.$emit('user-approved');\r\n        alert('อนุมัติผู้ใช้เรียบร้อยแล้ว');\r\n      } catch (error) {\r\n        console.error('Error approving user:', error);\r\n        alert('ไม่สามารถอนุมัติผู้ใช้ได้ กรุณาลองอีกครั้ง');\r\n      }\r\n    },\r\n    logout() {\r\n      // ดึง userId จาก localStorage\r\n      const userId = localStorage.getItem('userId');\r\n\r\n      // Save profile picture URL before clearing localStorage\r\n      // ใช้ userId ในการดึงรูปภาพเพื่อไม่ให้ปะปนกัน\r\n      const profilePictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n\r\n      // Clear all localStorage items except profile picture\r\n      localStorage.clear();\r\n\r\n      // If we had a profile picture and it's a base64 image, save it to sessionStorage\r\n      // This will persist until the browser tab is closed\r\n      if (userId && profilePictureUrl && profilePictureUrl.startsWith('data:image/')) {\r\n        // เก็บรูปภาพแยกตาม userId เพื่อไม่ให้ปะปนกัน\r\n        sessionStorage.setItem(`lastProfilePicture_${userId}`, profilePictureUrl);\r\n        console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\r\n      }\r\n\r\n      // Reset app state\r\n      this.showNotifications = false;\r\n      this.pendingUsers = [];\r\n      this.userId = '';\r\n      this.userEmail = '';\r\n      this.userStatus = '';\r\n      this.userFullName = '';\r\n      this.userPhone = '';\r\n      this.userAddress = '';\r\n\r\n      // Force navigation to login page\r\n      window.location.href = '/login';\r\n    },\r\n    // Add debounce to prevent too frequent API calls\r\n    _fetchUserProfileDebounced: null,\r\n\r\n    async fetchUserProfile() {\r\n      // If we already have a pending request, don't make another one\r\n      if (this._fetchUserProfileDebounced) {\r\n        console.log('Skipping duplicate profile fetch request');\r\n        return;\r\n      }\r\n\r\n      // Set a flag to prevent duplicate requests\r\n      this._fetchUserProfileDebounced = true;\r\n\r\n      // Clear the flag after 2 seconds\r\n      setTimeout(() => {\r\n        this._fetchUserProfileDebounced = null;\r\n      }, 2000);\r\n\r\n      try {\r\n        console.log('Fetching user profile...');\r\n\r\n        // ดึง userId จาก localStorage\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        // First check for profile picture in localStorage (base64 data) before API call\r\n        // This ensures we have an image to display immediately\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          console.log(`Using profile picture from localStorage for user ID: ${userId}`);\r\n          this.profileImageUrl = storedPictureUrl;\r\n        }\r\n        // If no localStorage image, check sessionStorage for last profile picture\r\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n          console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\r\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n          this.profileImageUrl = lastPicture;\r\n          // Also save it back to localStorage for future use\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n        }\r\n\r\n        // Now fetch the user profile from the API\r\n        const response = await api.getUserProfile();\r\n        const user = response.data.user;\r\n        console.log('User profile data:', user);\r\n\r\n        if (user) {\r\n          this.userEmail = user.user_email || this.userEmail;\r\n          this.userStatus = user.status || this.userStatus;\r\n          this.userFullName = user.first_name && user.last_name ?\r\n            `${user.first_name} ${user.last_name}` : this.userFullName;\r\n          this.userPhone = user.phone || this.userPhone;\r\n          this.userAddress = user.address || this.userAddress;\r\n\r\n          // ถ้ามีรูปภาพจาก API และไม่มีรูปภาพใน localStorage\r\n          if (user.profile_picture && (!storedPictureUrl || !storedPictureUrl.startsWith('data:image/'))) {\r\n            console.log('Profile picture found in API response:', user.profile_picture);\r\n\r\n            // ถ้าเป็น URL ภายนอก (เช่น randomuser.me) ใช้โดยตรง\r\n            if (user.profile_picture.startsWith('http')) {\r\n              this.profileImageUrl = user.profile_picture;\r\n            } else {\r\n              // สำหรับ URL ของเซิร์ฟเวอร์ เพิ่ม timestamp และใช้ path แบบสัมพัทธ์\r\n              const timestamp = new Date().getTime();\r\n              const serverUrl = `${user.profile_picture}?t=${timestamp}`;\r\n              this.profileImageUrl = serverUrl;\r\n\r\n              // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\r\n              localStorage.setItem(`serverProfilePictureUrl_${userId}`, user.profile_picture);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n\r\n        // Even if API fails, try to use stored images\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        // Try localStorage first\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          console.log(`Using profile picture from localStorage after API error for user ID: ${userId}`);\r\n          this.profileImageUrl = storedPictureUrl;\r\n        }\r\n        // Then try sessionStorage\r\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n          console.log(`Using last profile picture from sessionStorage after API error for user ID: ${userId}`);\r\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n          this.profileImageUrl = lastPicture;\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n        }\r\n        // ถ้าไม่มีรูปภาพใน localStorage หรือ sessionStorage ให้ใช้รูปภาพจาก serverProfilePictureUrl\r\n        else {\r\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n          if (serverPictureUrl) {\r\n            const timestamp = new Date().getTime();\r\n            this.profileImageUrl = `${serverPictureUrl}?t=${timestamp}`;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    getFullImageUrl(url) {\r\n      // ดึง userId จาก localStorage\r\n      const userId = localStorage.getItem('userId');\r\n\r\n      // ถ้าไม่มี userId ให้ใช้ URL ที่ได้รับ\r\n      if (!userId) {\r\n        console.log('No userId found in localStorage');\r\n        return url || '';\r\n      }\r\n\r\n      // ถ้าไม่มี URL ให้ลองดึงจาก localStorage\r\n      if (!url) {\r\n        console.log('No URL provided, trying to get from localStorage');\r\n\r\n        // ลองดึงจาก localStorage ก่อน\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          console.log(`Found profile picture in localStorage for user ID: ${userId}`);\r\n          return storedPictureUrl;\r\n        }\r\n\r\n        // ถ้าไม่มีใน localStorage ให้ลองดึงจาก sessionStorage\r\n        const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n        if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\r\n          console.log(`Found profile picture in sessionStorage for user ID: ${userId}`);\r\n          // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\r\n          return lastProfilePicture;\r\n        }\r\n\r\n        // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ลองดึงจาก serverProfilePictureUrl\r\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n        if (serverPictureUrl) {\r\n          console.log(`Found server profile picture URL for user ID: ${userId}`);\r\n          const timestamp = new Date().getTime();\r\n          return `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\r\n        }\r\n\r\n        console.log('No profile picture found in any storage');\r\n        return '';\r\n      }\r\n\r\n      // ถ้ามี URL ให้ตรวจสอบว่าเป็น URL ประเภทใด\r\n\r\n      // If it's a data URL (base64), return as is\r\n      if (url.startsWith('data:')) {\r\n        return url;\r\n      }\r\n\r\n      // If it's a relative URL, prepend the API base URL\r\n      if (url.startsWith('/')) {\r\n        // Add a timestamp to prevent caching\r\n        const timestamp = new Date().getTime();\r\n        // Use the correct API URL\r\n        return `http://localhost:4000${url}?t=${timestamp}`;\r\n      }\r\n\r\n      // If it's an https URL (like picsum.photos), return as is\r\n      if (url.startsWith('http')) {\r\n        return url;\r\n      }\r\n\r\n      // Otherwise, return the URL as is\r\n      return url;\r\n    },\r\n\r\n    handleImageError(e) {\r\n      console.log('Image error occurred for:', e.target.src);\r\n\r\n      // Prevent infinite loop by checking if the image has already been processed\r\n      if (e.target.dataset.errorHandled) {\r\n        console.log('Image already handled, using placeholder');\r\n        // If we've already tried to handle this error, just use the placeholder\r\n        e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\r\n        return;\r\n      }\r\n\r\n      // Mark this image as being processed to prevent infinite loops\r\n      e.target.dataset.errorHandled = 'true';\r\n\r\n      // ดึง userId จาก localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      if (!userId) {\r\n        console.log('No userId found in localStorage');\r\n        e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\r\n        return;\r\n      }\r\n\r\n      console.log('Trying to recover image for userId:', userId);\r\n\r\n      // Try to use stored base64 image if available in localStorage\r\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n        console.log('Using image from localStorage');\r\n        e.target.src = storedPictureUrl;\r\n        // Update the profileImageUrl property\r\n        this.profileImageUrl = storedPictureUrl;\r\n        return;\r\n      }\r\n\r\n      // Try to use stored base64 image from sessionStorage if available\r\n      const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n      if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\r\n        console.log('Using image from sessionStorage');\r\n        e.target.src = lastProfilePicture;\r\n        // Also save it back to localStorage for future use\r\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\r\n        // Update the profileImageUrl property\r\n        this.profileImageUrl = lastProfilePicture;\r\n        return;\r\n      }\r\n\r\n      // Try to use server URL if available\r\n      const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n      if (serverPictureUrl) {\r\n        console.log('Using server URL:', serverPictureUrl);\r\n        const timestamp = new Date().getTime();\r\n        const fullUrl = `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\r\n        e.target.src = fullUrl;\r\n        // Update the profileImageUrl property\r\n        this.profileImageUrl = fullUrl;\r\n        return;\r\n      }\r\n\r\n      // If all else fails, fall back to placeholder\r\n      console.log('All recovery attempts failed, using placeholder');\r\n      e.target.src = 'https://via.placeholder.com/256x256?text=Profile';\r\n      // Update the profileImageUrl property\r\n      this.profileImageUrl = '';\r\n    }\r\n  },\r\n  watch: {\r\n    isLoggedIn(newVal) {\r\n      if (newVal) {\r\n        // Update user status from localStorage\r\n        this.userStatus = localStorage.getItem('userStatus') || '';\r\n        this.fetchPendingUsers();\r\n      }\r\n    },\r\n    // Watch for route changes to update user status and pending users\r\n    '$route'() {\r\n      if (this.isLoggedIn) {\r\n        this.userStatus = localStorage.getItem('userStatus') || '';\r\n        // เรียกใช้ fetchPendingUsers เมื่อมีการเปลี่ยนเส้นทาง\r\n        if (this.userStatus === 'headman' || this.userStatus === 'assistant') {\r\n          this.fetchPendingUsers();\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log('App component mounted');\r\n\r\n    // Force check login status\r\n    const token = localStorage.getItem('token');\r\n\r\n    // Update user status from localStorage\r\n    this.userStatus = localStorage.getItem('userStatus') || '';\r\n\r\n    // ดึง userId จาก localStorage\r\n    const userId = localStorage.getItem('userId');\r\n    console.log('User ID from localStorage:', userId);\r\n\r\n    // Try to load profile image from localStorage immediately\r\n    if (userId) {\r\n      console.log('Attempting to load profile image for user ID:', userId);\r\n\r\n      // First check localStorage for base64 image\r\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n        console.log('Found profile image in localStorage');\r\n        this.profileImageUrl = storedPictureUrl;\r\n      }\r\n      // Then check sessionStorage\r\n      else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n        console.log('Found profile image in sessionStorage');\r\n        const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n        this.profileImageUrl = lastPicture;\r\n        // Save to localStorage for future use\r\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n      }\r\n      // Then check server URL\r\n      else {\r\n        console.log('Checking for server profile picture URL');\r\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n        if (serverPictureUrl) {\r\n          console.log('Found server profile picture URL:', serverPictureUrl);\r\n          const timestamp = new Date().getTime();\r\n          this.profileImageUrl = `http://localhost:4000${serverPictureUrl}?t=${timestamp}`;\r\n        } else {\r\n          console.log('No profile image found in any storage');\r\n        }\r\n      }\r\n    } else {\r\n      console.log('No user ID found in localStorage');\r\n    }\r\n\r\n    if (token) {\r\n      console.log('User is logged in, fetching profile data');\r\n\r\n      // Fetch user data if logged in - with a slight delay to ensure UI is responsive first\r\n      setTimeout(() => {\r\n        this.fetchUserProfile();\r\n      }, 100);\r\n\r\n      // ตรวจสอบว่าเป็น headman หรือ assistant หรือไม่\r\n      const userStatus = localStorage.getItem('userStatus');\r\n      if (userStatus === 'headman' || userStatus === 'assistant') {\r\n        // ดึงข้อมูลผู้ใช้ที่รอการอนุมัติทันที - with a slight delay\r\n        setTimeout(() => {\r\n          this.fetchPendingUsers();\r\n        }, 200);\r\n\r\n        // ตั้งค่าให้ดึงข้อมูลผู้ใช้ที่รอการอนุมัติทุก 30 วินาที\r\n        this.pendingUsersInterval = setInterval(() => {\r\n          this.fetchPendingUsers();\r\n        }, 30000); // 30 วินาที\r\n      }\r\n\r\n      // Set up event listener for profile updates\r\n      this.profileUpdateHandler = () => {\r\n        console.log('Profile updated event received');\r\n\r\n        // Always reload the profile image from localStorage first\r\n        if (userId) {\r\n          const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n          if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n            console.log('Using profile image from localStorage after update');\r\n            this.profileImageUrl = storedPictureUrl;\r\n          }\r\n        }\r\n\r\n        // Then fetch the latest profile data\r\n        this.fetchUserProfile();\r\n      };\r\n\r\n      window.addEventListener('profile-updated', this.profileUpdateHandler);\r\n\r\n      // Force update user status\r\n      if (userStatus) {\r\n        this.userStatus = userStatus;\r\n      }\r\n    } else if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\r\n      // Redirect to login if not logged in and not already on login/register page\r\n      console.log('User not logged in, redirecting to login page');\r\n      window.location.href = '/login';\r\n    }\r\n  },\r\n\r\n  beforeUnmount() {\r\n    console.log('App component will be unmounted');\r\n\r\n    // ทำความสะอาดตัวจับเวลาและตัวฟังก์ชันเมื่อคอมโพเนนต์ถูกทำลาย\r\n    if (this.pendingUsersInterval) {\r\n      console.log('Clearing pending users interval');\r\n      clearInterval(this.pendingUsersInterval);\r\n    }\r\n\r\n    if (this.profileUpdateHandler) {\r\n      console.log('Removing profile update event listener');\r\n      window.removeEventListener('profile-updated', this.profileUpdateHandler);\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // ล้าง interval เมื่อ component ถูกทำลาย\r\n    if (this.pendingUsersInterval) {\r\n      clearInterval(this.pendingUsersInterval);\r\n    }\r\n\r\n    // Clean up event listener\r\n    window.removeEventListener('profile-updated', this.fetchUserProfile);\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n@import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600&family=Kanit:wght@300;400;500;600&family=Sarabun:wght@300;400;500;600&display=swap');\r\n\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n#app {\r\n  font-family: 'Prompt', 'Kanit', 'Sarabun', Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  color: #2c3e50;\r\n  height: 100vh;\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  position: relative;\r\n}\r\n\r\n.app-container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n/* Sidebar Navigation */\r\n.sidebar-nav {\r\n  width: 320px;\r\n  background-color: #2C3E50;\r\n  color: white;\r\n  height: 100vh;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  overflow-y: auto;\r\n  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n}\r\n\r\n.sidebar-profile {\r\n  padding: 15px 12px;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.05);\r\n  text-align: center;\r\n}\r\n\r\n.profile-image {\r\n  width: 128px;\r\n  height: 128px;\r\n  margin: 0 auto 15px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  border: 3px solid #fff;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.profile-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.profile-info h3 {\r\n  margin: 0 0 5px;\r\n  font-size: 1.2rem;\r\n  color: white;\r\n  font-weight: 500;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  font-family: 'Prompt', sans-serif;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.user-role {\r\n  display: inline-block;\r\n  padding: 3px 8px;\r\n  border-radius: 12px;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.role-headman {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.role-assistant {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.role-villager, .role-pending, .role-undefined {\r\n  background-color: #ffc107;\r\n  color: #212529;\r\n}\r\n\r\n.user-details {\r\n  margin: 12px 0;\r\n  text-align: left;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.info-item {\r\n  margin-bottom: 6px;\r\n  color: rgba(255, 255, 255, 0.9);\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.info-label {\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n  color: rgba(255, 255, 255, 0.7);\r\n  min-width: 70px;\r\n}\r\n\r\n.info-value {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n}\r\n\r\n.profile-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  padding: 6px 12px;\r\n  border-radius: 4px;\r\n  font-size: 0.85rem;\r\n  margin: 6px auto;\r\n  transition: background-color 0.3s;\r\n  width: 80%;\r\n  text-align: center;\r\n  height: 32px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.toggle-details-btn {\r\n  background-color: #6c757d;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.toggle-details-btn:hover {\r\n  background-color: #5a6268;\r\n}\r\n\r\n.toggle-details-btn .dropdown-icon {\r\n  margin-left: 5px;\r\n  font-size: 10px;\r\n  transition: transform 0.3s;\r\n}\r\n\r\n.edit-profile-btn {\r\n  display: flex;\r\n  background-color: #dc3545;\r\n  text-decoration: none;\r\n}\r\n\r\n.edit-profile-btn:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n.edit-profile-btn:hover {\r\n  background-color: #0069d9;\r\n}\r\n\r\n.sidebar-divider {\r\n  height: 1px;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  margin: 0;\r\n}\r\n\r\n.sidebar-menu {\r\n  padding: 15px 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.sidebar-menu-item {\r\n  color: rgba(255, 255, 255, 0.9);\r\n  text-decoration: none;\r\n  padding: 12px 16px;\r\n  transition: all 0.3s;\r\n  border-left: 3px solid transparent;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: 400;\r\n  letter-spacing: 0.5px;\r\n  font-family: 'Prompt', sans-serif;\r\n}\r\n\r\n.sidebar-menu-item > *:first-child {\r\n  margin-right: 8px;\r\n}\r\n\r\n/* ทำให้อีโมจิมีสีขาวชัดเจน */\r\n.menu-emoji {\r\n  color: white;\r\n  font-size: 1.1em;\r\n  display: inline-block;\r\n  margin-right: 8px;\r\n  filter: brightness(1.2);\r\n  text-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n}\r\n\r\n.sidebar-menu-item:hover {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  border-left-color: #3498DB;\r\n}\r\n\r\n.sidebar-menu-item.router-link-active {\r\n  background-color: rgba(255, 255, 255, 0.15);\r\n  color: white;\r\n  border-left-color: #3498DB;\r\n  font-weight: 500;\r\n}\r\n\r\n/* เมนูแบบเลื่อนลง */\r\n.dropdown-menu {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.dropdown-header {\r\n  color: rgba(255, 255, 255, 0.9);\r\n  text-decoration: none;\r\n  padding: 12px 16px;\r\n  transition: all 0.3s;\r\n  border-left: 3px solid transparent;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 24px;\r\n  font-weight: 400;\r\n  letter-spacing: 0.5px;\r\n  font-family: 'Prompt', sans-serif;\r\n  cursor: pointer;\r\n}\r\n\r\n.dropdown-header:hover {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  color: white;\r\n  border-left-color: #3498DB;\r\n}\r\n\r\n.dropdown-icon {\r\n  font-size: 16px;\r\n  transition: transform 0.3s;\r\n  margin-left: 8px;\r\n}\r\n\r\n.dropdown-icon-open {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.dropdown-content {\r\n  overflow: hidden;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.submenu-item {\r\n  padding-left: 35px !important;\r\n  font-size: 22px;\r\n  padding-top: 10px !important;\r\n  padding-bottom: 10px !important;\r\n  font-family: 'Prompt', sans-serif;\r\n  font-weight: 300;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n/* Main Content Area */\r\n.main-content-area {\r\n  flex: 1;\r\n  margin-left: 320px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.top-nav {\r\n  background-color: white;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  padding: 0;\r\n  height: 60px;\r\n}\r\n\r\n.nav-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  height: 100%;\r\n}\r\n\r\n.nav-left, .nav-right {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.nav-left h2 {\r\n  margin: 0;\r\n  font-size: 1.2rem;\r\n  color: #333;\r\n}\r\n\r\n.nav-right {\r\n  gap: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.content-wrapper {\r\n  padding: 20px;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n\r\n\r\n.logout-btn {\r\n  background-color: #f44336;\r\n}\r\n\r\n.logout-btn:hover {\r\n  background-color: #d32f2f;\r\n}\r\n\r\n.notification-btn {\r\n  background-color: #ff9800;\r\n  position: relative;\r\n}\r\n\r\n.notification-btn:hover {\r\n  background-color: #e68a00;\r\n}\r\n\r\n.notification-container {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\n\r\n.notification-dropdown {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 100%;\r\n  width: 300px;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n  z-index: 1000;\r\n  text-align: left;\r\n  margin-top: 5px;\r\n}\r\n\r\n.notification-dropdown h3 {\r\n  margin-top: 0;\r\n  border-bottom: 1px solid #eee;\r\n  padding-bottom: 10px;\r\n  color: #333;\r\n}\r\n\r\n.pending-user {\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.pending-user:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.approve-btn {\r\n  padding: 6px 12px;\r\n  font-size: 14px;\r\n}\r\n\r\n.no-pending {\r\n  padding: 10px;\r\n  color: #666;\r\n  font-style: italic;\r\n  text-align: center;\r\n}\r\n\r\n.dropdown-footer {\r\n  margin-top: 15px;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #eee;\r\n  text-align: center;\r\n}\r\n\r\n.view-all-btn {\r\n  display: inline-block;\r\n  background-color: #007bff;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.view-all-btn:hover {\r\n  background-color: #0056b3;\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\n.form-container {\r\n  background-color: #f2f2f2;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n  text-align: left;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  margin-top: 10px;\r\n}\r\n\r\n.success-message {\r\n  color: green;\r\n  margin-top: 10px;\r\n}\r\n\r\n.link {\r\n  color: #4CAF50;\r\n  text-decoration: none;\r\n  margin-top: 15px;\r\n  display: inline-block;\r\n}\r\n\r\n.link:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":"AAuGA,OAAOA,GAAE,MAAO,gBAAgB;AAEhC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL;IACA,MAAMC,YAAW,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,KAAK,EAAE;IACzD,MAAMC,WAAU,GAAIF,YAAY,CAACC,OAAO,CAAC,OAAO,KAAK,EAAE;IACvD,IAAIE,YAAW,GAAIH,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;IAE3D,OAAO;MACLG,YAAY,EAAE,EAAE;MAChBC,iBAAiB,EAAE,KAAK;MACxBC,gBAAgB,EAAE,KAAK;MAAE;MACzBC,eAAe,EAAE,KAAK;MAAE;MACxBC,OAAO,EAAE,KAAK;MACdC,MAAM,EAAEV,YAAY;MACpBW,SAAS,EAAER,WAAW;MACtBS,UAAU,EAAER,YAAY;MACxBS,YAAY,EAAE,gBAAgB;MAC9BC,SAAS,EAAE,YAAY;MACvBC,WAAW,EAAE,OAAO;MACpBC,eAAe,EAAE,EAAE;MACnBC,oBAAoB,EAAE,IAAG,CAAE;IAC7B,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,CAAC,CAAClB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACxC,CAAC;IACDkB,oBAAoBA,CAAA,EAAG;MACrB,MAAMC,MAAK,GAAIpB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACjD,OAAOmB,MAAK,KAAM,SAAQ,IAAKA,MAAK,KAAM,WAAW;IACvD,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACC,MAAK,IAAK,IAAI,CAACA,MAAM,CAACC,IAAG,KAAM,QAAQ;IACrD,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,OAAO,IAAI,CAACF,MAAK,IAAK,IAAI,CAACA,MAAM,CAACC,IAAG,KAAM,WAAW;IACxD;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,UAAUA,CAACC,IAAI,EAAE;MACf,IAAI,CAACA,IAAI,EAAE,OAAO,MAAM;MACxB,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;IACrD,CAAC;IACDC,aAAaA,CAACX,MAAM,EAAE;MACpB;MACA,OAAO,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC,CAACY,QAAQ,CAACZ,MAAM,CAAC;IAC9D,CAAC;IACDa,mBAAmBA,CAAA,EAAG;MACpB,IAAI,CAAC5B,iBAAgB,GAAI,CAAC,IAAI,CAACA,iBAAiB;IAClD,CAAC;IACD6B,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAAC5B,gBAAe,GAAI,CAAC,IAAI,CAACA,gBAAgB;IAChD,CAAC;IACD6B,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAAC5B,eAAc,GAAI,CAAC,IAAI,CAACA,eAAe;IAC9C,CAAC;IACD,MAAM6B,iBAAiBA,CAAA,EAAG;MACxB,MAAMlB,UAAS,GAAI,CAAC,CAAClB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAClD,MAAMU,UAAS,GAAIX,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACrD,MAAMkB,oBAAmB,GAAIR,UAAS,KAAM,SAAQ,IAAKA,UAAS,KAAM,WAAW;MAEnF,IAAI,CAACO,UAAS,IAAK,CAACC,oBAAoB,EAAE;MAE1C,IAAI;QACF,IAAI,CAACX,OAAM,GAAI,IAAI;QACnB6B,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;QAExC;QACA,MAAMC,QAAO,GAAI,MAAM3C,GAAG,CAAC4C,eAAe,CAAC,CAAC;QAC5C,IAAIpC,YAAW,GAAImC,QAAQ,CAACzC,IAAI,CAACM,YAAW,IAAK,EAAE;QACnDiC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAElC,YAAY,CAAC;;QAEpD;QACA,IAAI;UACF,MAAMqC,gBAAe,GAAI,MAAM7C,GAAG,CAAC8C,WAAW,CAAC,CAAC;UAChD,IAAID,gBAAgB,CAAC3C,IAAG,IAAK2C,gBAAgB,CAAC3C,IAAI,CAAC6C,KAAK,EAAE;YACxD;YACA,MAAMC,kBAAiB,GAAIH,gBAAgB,CAAC3C,IAAI,CAAC6C,KAAK,CAACE,MAAM,CAACC,IAAG,IAC/DA,IAAI,CAAC1B,MAAK,KAAM,SAClB,CAAC;YAEDiB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEM,kBAAkB,CAAC;;YAE7D;YACA,MAAMG,aAAY,GAAI,CAAC,GAAG3C,YAAY,CAAC;YAEvCwC,kBAAkB,CAACI,OAAO,CAACF,IAAG,IAAK;cACjC;cACA,MAAMG,WAAU,GAAIF,aAAa,CAACG,IAAI,CAACC,YAAW,IAChDA,YAAY,CAACC,OAAM,KAAMN,IAAI,CAACM,OAChC,CAAC;;cAED;cACA,IAAI,CAACH,WAAW,EAAE;gBAChBF,aAAa,CAACM,IAAI,CAACP,IAAI,CAAC;cAC1B;YACF,CAAC,CAAC;YAEF,IAAI,CAAC1C,YAAW,GAAI2C,aAAa;YACjCV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAClC,YAAY,CAAC;UAC3D;QACF,EAAE,OAAOkD,aAAa,EAAE;UACtBjB,OAAO,CAACkB,KAAK,CAAC,2BAA2B,EAAED,aAAa,CAAC;UACzD;UACA,IAAI,CAAClD,YAAW,GAAIA,YAAY;QAClC;;QAEA;QACA,IAAI,IAAI,CAACA,YAAY,CAACoD,MAAK,KAAM,CAAC,EAAE;UAClC,IAAI;YACF,MAAMC,aAAY,GAAI,MAAM7D,GAAG,CAAC8D,oBAAoB,CAAC,CAAC;YACtDrB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmB,aAAa,CAAC3D,IAAI,CAAC;YAEvD,IAAI2D,aAAa,CAAC3D,IAAG,IAAK2D,aAAa,CAAC3D,IAAI,CAAC6D,KAAI,GAAI,CAAC,EAAE;cACtDtB,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;cAC7E;cACA,MAAMsB,aAAY,GAAI,MAAMhE,GAAG,CAAC4C,eAAe,CAAC,CAAC;cACjD,IAAI,CAACpC,YAAW,GAAIwD,aAAa,CAAC9D,IAAI,CAACM,YAAW,IAAK,EAAE;cACzDiC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAClC,YAAY,CAAC;YACxD;UACF,EAAE,OAAOyD,UAAU,EAAE;YACnBxB,OAAO,CAACkB,KAAK,CAAC,qCAAqC,EAAEM,UAAU,CAAC;UAClE;QACF;MACF,EAAE,OAAON,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D,UAAU;QACR,IAAI,CAAC/C,OAAM,GAAI,KAAK;QACpB6B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAClC,YAAY,CAAC;MAC7D;IACF,CAAC;IACD,MAAM0D,WAAWA,CAACrD,MAAM,EAAE;MACxB;MACA,MAAMsD,aAAY,GAAI,IAAI,CAAC3D,YAAY,CAAC4D,IAAI,CAAClB,IAAG,IAAKA,IAAI,CAACM,OAAM,KAAM3C,MAAM,CAAC;MAE7E,IAAI,CAACsD,aAAa,EAAE;QAClBE,KAAK,CAAC,mBAAmB,CAAC;QAC1B;MACF;;MAEA;MACA,IAAI,CAAC,IAAI,CAAClC,aAAa,CAACgC,aAAa,CAAC3C,MAAM,CAAC,EAAE;QAC7C6C,KAAK,CAAC,iHAAiH,CAAC;QACxH;MACF;MAEA,IAAI;QACF,MAAMrE,GAAG,CAACkE,WAAW,CAACrD,MAAM,CAAC;QAC7B;QACA,IAAI,CAACL,YAAW,GAAI,IAAI,CAACA,YAAY,CAACyC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACM,OAAM,KAAM3C,MAAM,CAAC;QAC7E;QACA,IAAI,CAACyD,KAAK,CAAC,eAAe,CAAC;QAC3BD,KAAK,CAAC,4BAA4B,CAAC;MACrC,EAAE,OAAOV,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CU,KAAK,CAAC,4CAA4C,CAAC;MACrD;IACF,CAAC;IACDE,MAAMA,CAAA,EAAG;MACP;MACA,MAAM1D,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;MAE7C;MACA;MACA,MAAMmE,iBAAgB,GAAIpE,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;;MAE7E;MACAT,YAAY,CAACqE,KAAK,CAAC,CAAC;;MAEpB;MACA;MACA,IAAI5D,MAAK,IAAK2D,iBAAgB,IAAKA,iBAAiB,CAACE,UAAU,CAAC,aAAa,CAAC,EAAE;QAC9E;QACAC,cAAc,CAACC,OAAO,CAAC,sBAAsB/D,MAAM,EAAE,EAAE2D,iBAAiB,CAAC;QACzE/B,OAAO,CAACC,GAAG,CAAC,wDAAwD7B,MAAM,EAAE,CAAC;MAC/E;;MAEA;MACA,IAAI,CAACJ,iBAAgB,GAAI,KAAK;MAC9B,IAAI,CAACD,YAAW,GAAI,EAAE;MACtB,IAAI,CAACK,MAAK,GAAI,EAAE;MAChB,IAAI,CAACC,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACC,UAAS,GAAI,EAAE;MACpB,IAAI,CAACC,YAAW,GAAI,EAAE;MACtB,IAAI,CAACC,SAAQ,GAAI,EAAE;MACnB,IAAI,CAACC,WAAU,GAAI,EAAE;;MAErB;MACA2D,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,QAAQ;IACjC,CAAC;IACD;IACAC,0BAA0B,EAAE,IAAI;IAEhC,MAAMC,gBAAgBA,CAAA,EAAG;MACvB;MACA,IAAI,IAAI,CAACD,0BAA0B,EAAE;QACnCvC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvD;MACF;;MAEA;MACA,IAAI,CAACsC,0BAAyB,GAAI,IAAI;;MAEtC;MACAE,UAAU,CAAC,MAAM;QACf,IAAI,CAACF,0BAAyB,GAAI,IAAI;MACxC,CAAC,EAAE,IAAI,CAAC;MAER,IAAI;QACFvC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;QAEvC;QACA,MAAM7B,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;QAE7C;QACA;QACA,MAAM8E,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;QAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;UAClEjC,OAAO,CAACC,GAAG,CAAC,wDAAwD7B,MAAM,EAAE,CAAC;UAC7E,IAAI,CAACM,eAAc,GAAIgE,gBAAgB;QACzC;QACA;QAAA,KACK,IAAIR,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC,EAAE;UAC/D4B,OAAO,CAACC,GAAG,CAAC,+DAA+D7B,MAAM,EAAE,CAAC;UACpF,MAAMuE,WAAU,GAAIT,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC;UAC1E,IAAI,CAACM,eAAc,GAAIiE,WAAW;UAClC;UACAhF,YAAY,CAACwE,OAAO,CAAC,qBAAqB/D,MAAM,EAAE,EAAEuE,WAAW,CAAC;QAClE;;QAEA;QACA,MAAMzC,QAAO,GAAI,MAAM3C,GAAG,CAACqF,cAAc,CAAC,CAAC;QAC3C,MAAMnC,IAAG,GAAIP,QAAQ,CAACzC,IAAI,CAACgD,IAAI;QAC/BT,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,IAAI,CAAC;QAEvC,IAAIA,IAAI,EAAE;UACR,IAAI,CAACpC,SAAQ,GAAIoC,IAAI,CAACoC,UAAS,IAAK,IAAI,CAACxE,SAAS;UAClD,IAAI,CAACC,UAAS,GAAImC,IAAI,CAAC1B,MAAK,IAAK,IAAI,CAACT,UAAU;UAChD,IAAI,CAACC,YAAW,GAAIkC,IAAI,CAACqC,UAAS,IAAKrC,IAAI,CAACsC,SAAQ,GAClD,GAAGtC,IAAI,CAACqC,UAAU,IAAIrC,IAAI,CAACsC,SAAS,EAAC,GAAI,IAAI,CAACxE,YAAY;UAC5D,IAAI,CAACC,SAAQ,GAAIiC,IAAI,CAACuC,KAAI,IAAK,IAAI,CAACxE,SAAS;UAC7C,IAAI,CAACC,WAAU,GAAIgC,IAAI,CAACwC,OAAM,IAAK,IAAI,CAACxE,WAAW;;UAEnD;UACA,IAAIgC,IAAI,CAACyC,eAAc,KAAM,CAACR,gBAAe,IAAK,CAACA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE;YAC9FjC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEQ,IAAI,CAACyC,eAAe,CAAC;;YAE3E;YACA,IAAIzC,IAAI,CAACyC,eAAe,CAACjB,UAAU,CAAC,MAAM,CAAC,EAAE;cAC3C,IAAI,CAACvD,eAAc,GAAI+B,IAAI,CAACyC,eAAe;YAC7C,OAAO;cACL;cACA,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;cACtC,MAAMC,SAAQ,GAAI,GAAG7C,IAAI,CAACyC,eAAe,MAAMC,SAAS,EAAE;cAC1D,IAAI,CAACzE,eAAc,GAAI4E,SAAS;;cAEhC;cACA3F,YAAY,CAACwE,OAAO,CAAC,2BAA2B/D,MAAM,EAAE,EAAEqC,IAAI,CAACyC,eAAe,CAAC;YACjF;UACF;QACF;MACF,EAAE,OAAOhC,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;;QAEpD;QACA,MAAM9C,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;QAE7C;QACA,MAAM8E,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;QAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;UAClEjC,OAAO,CAACC,GAAG,CAAC,wEAAwE7B,MAAM,EAAE,CAAC;UAC7F,IAAI,CAACM,eAAc,GAAIgE,gBAAgB;QACzC;QACA;QAAA,KACK,IAAIR,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC,EAAE;UAC/D4B,OAAO,CAACC,GAAG,CAAC,+EAA+E7B,MAAM,EAAE,CAAC;UACpG,MAAMuE,WAAU,GAAIT,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC;UAC1E,IAAI,CAACM,eAAc,GAAIiE,WAAW;UAClChF,YAAY,CAACwE,OAAO,CAAC,qBAAqB/D,MAAM,EAAE,EAAEuE,WAAW,CAAC;QAClE;QACA;QAAA,KACK;UACH,MAAMY,gBAAe,GAAI5F,YAAY,CAACC,OAAO,CAAC,2BAA2BQ,MAAM,EAAE,CAAC;UAClF,IAAImF,gBAAgB,EAAE;YACpB,MAAMJ,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;YACtC,IAAI,CAAC3E,eAAc,GAAI,GAAG6E,gBAAgB,MAAMJ,SAAS,EAAE;UAC7D;QACF;MACF;IACF,CAAC;IAEDK,eAAeA,CAACC,GAAG,EAAE;MACnB;MACA,MAAMrF,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;MAE7C;MACA,IAAI,CAACQ,MAAM,EAAE;QACX4B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,OAAOwD,GAAE,IAAK,EAAE;MAClB;;MAEA;MACA,IAAI,CAACA,GAAG,EAAE;QACRzD,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;;QAE/D;QACA,MAAMyC,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;QAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;UAClEjC,OAAO,CAACC,GAAG,CAAC,sDAAsD7B,MAAM,EAAE,CAAC;UAC3E,OAAOsE,gBAAgB;QACzB;;QAEA;QACA,MAAMgB,kBAAiB,GAAIxB,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC;QACjF,IAAIsF,kBAAiB,IAAKA,kBAAkB,CAACzB,UAAU,CAAC,aAAa,CAAC,EAAE;UACtEjC,OAAO,CAACC,GAAG,CAAC,wDAAwD7B,MAAM,EAAE,CAAC;UAC7E;UACAT,YAAY,CAACwE,OAAO,CAAC,qBAAqB/D,MAAM,EAAE,EAAEsF,kBAAkB,CAAC;UACvE,OAAOA,kBAAkB;QAC3B;;QAEA;QACA,MAAMH,gBAAe,GAAI5F,YAAY,CAACC,OAAO,CAAC,2BAA2BQ,MAAM,EAAE,CAAC;QAClF,IAAImF,gBAAgB,EAAE;UACpBvD,OAAO,CAACC,GAAG,CAAC,iDAAiD7B,MAAM,EAAE,CAAC;UACtE,MAAM+E,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UACtC,OAAO,wBAAwBE,gBAAgB,MAAMJ,SAAS,EAAE;QAClE;QAEAnD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtD,OAAO,EAAE;MACX;;MAEA;;MAEA;MACA,IAAIwD,GAAG,CAACxB,UAAU,CAAC,OAAO,CAAC,EAAE;QAC3B,OAAOwB,GAAG;MACZ;;MAEA;MACA,IAAIA,GAAG,CAACxB,UAAU,CAAC,GAAG,CAAC,EAAE;QACvB;QACA,MAAMkB,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACtC;QACA,OAAO,wBAAwBI,GAAG,MAAMN,SAAS,EAAE;MACrD;;MAEA;MACA,IAAIM,GAAG,CAACxB,UAAU,CAAC,MAAM,CAAC,EAAE;QAC1B,OAAOwB,GAAG;MACZ;;MAEA;MACA,OAAOA,GAAG;IACZ,CAAC;IAEDE,gBAAgBA,CAACC,CAAC,EAAE;MAClB5D,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE2D,CAAC,CAACC,MAAM,CAACC,GAAG,CAAC;;MAEtD;MACA,IAAIF,CAAC,CAACC,MAAM,CAACE,OAAO,CAACC,YAAY,EAAE;QACjChE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;QACvD;QACA2D,CAAC,CAACC,MAAM,CAACC,GAAE,GAAI,kDAAkD;QACjE;MACF;;MAEA;MACAF,CAAC,CAACC,MAAM,CAACE,OAAO,CAACC,YAAW,GAAI,MAAM;;MAEtC;MACA,MAAM5F,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC7C,IAAI,CAACQ,MAAM,EAAE;QACX4B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C2D,CAAC,CAACC,MAAM,CAACC,GAAE,GAAI,kDAAkD;QACjE;MACF;MAEA9D,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAE7B,MAAM,CAAC;;MAE1D;MACA,MAAMsE,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;MAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;QAClEjC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5C2D,CAAC,CAACC,MAAM,CAACC,GAAE,GAAIpB,gBAAgB;QAC/B;QACA,IAAI,CAAChE,eAAc,GAAIgE,gBAAgB;QACvC;MACF;;MAEA;MACA,MAAMgB,kBAAiB,GAAIxB,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC;MACjF,IAAIsF,kBAAiB,IAAKA,kBAAkB,CAACzB,UAAU,CAAC,aAAa,CAAC,EAAE;QACtEjC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C2D,CAAC,CAACC,MAAM,CAACC,GAAE,GAAIJ,kBAAkB;QACjC;QACA/F,YAAY,CAACwE,OAAO,CAAC,qBAAqB/D,MAAM,EAAE,EAAEsF,kBAAkB,CAAC;QACvE;QACA,IAAI,CAAChF,eAAc,GAAIgF,kBAAkB;QACzC;MACF;;MAEA;MACA,MAAMH,gBAAe,GAAI5F,YAAY,CAACC,OAAO,CAAC,2BAA2BQ,MAAM,EAAE,CAAC;MAClF,IAAImF,gBAAgB,EAAE;QACpBvD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEsD,gBAAgB,CAAC;QAClD,MAAMJ,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACtC,MAAMY,OAAM,GAAI,wBAAwBV,gBAAgB,MAAMJ,SAAS,EAAE;QACzES,CAAC,CAACC,MAAM,CAACC,GAAE,GAAIG,OAAO;QACtB;QACA,IAAI,CAACvF,eAAc,GAAIuF,OAAO;QAC9B;MACF;;MAEA;MACAjE,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9D2D,CAAC,CAACC,MAAM,CAACC,GAAE,GAAI,kDAAkD;MACjE;MACA,IAAI,CAACpF,eAAc,GAAI,EAAE;IAC3B;EACF,CAAC;EACDwF,KAAK,EAAE;IACLrF,UAAUA,CAACsF,MAAM,EAAE;MACjB,IAAIA,MAAM,EAAE;QACV;QACA,IAAI,CAAC7F,UAAS,GAAIX,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;QAC1D,IAAI,CAACmC,iBAAiB,CAAC,CAAC;MAC1B;IACF,CAAC;IACD;IACA,QAAQd,CAAA,EAAG;MACT,IAAI,IAAI,CAACJ,UAAU,EAAE;QACnB,IAAI,CAACP,UAAS,GAAIX,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;QAC1D;QACA,IAAI,IAAI,CAACU,UAAS,KAAM,SAAQ,IAAK,IAAI,CAACA,UAAS,KAAM,WAAW,EAAE;UACpE,IAAI,CAACyB,iBAAiB,CAAC,CAAC;QAC1B;MACF;IACF;EACF,CAAC;EACDqE,OAAOA,CAAA,EAAG;IACRpE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACA,MAAMoE,KAAI,GAAI1G,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,IAAI,CAACU,UAAS,GAAIX,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;;IAE1D;IACA,MAAMQ,MAAK,GAAIT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7CoC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE7B,MAAM,CAAC;;IAEjD;IACA,IAAIA,MAAM,EAAE;MACV4B,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAE7B,MAAM,CAAC;;MAEpE;MACA,MAAMsE,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;MAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;QAClEjC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;QAClD,IAAI,CAACvB,eAAc,GAAIgE,gBAAgB;MACzC;MACA;MAAA,KACK,IAAIR,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC,EAAE;QAC/D4B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD,MAAM0C,WAAU,GAAIT,cAAc,CAACtE,OAAO,CAAC,sBAAsBQ,MAAM,EAAE,CAAC;QAC1E,IAAI,CAACM,eAAc,GAAIiE,WAAW;QAClC;QACAhF,YAAY,CAACwE,OAAO,CAAC,qBAAqB/D,MAAM,EAAE,EAAEuE,WAAW,CAAC;MAClE;MACA;MAAA,KACK;QACH3C,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtD,MAAMsD,gBAAe,GAAI5F,YAAY,CAACC,OAAO,CAAC,2BAA2BQ,MAAM,EAAE,CAAC;QAClF,IAAImF,gBAAgB,EAAE;UACpBvD,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEsD,gBAAgB,CAAC;UAClE,MAAMJ,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UACtC,IAAI,CAAC3E,eAAc,GAAI,wBAAwB6E,gBAAgB,MAAMJ,SAAS,EAAE;QAClF,OAAO;UACLnD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACtD;MACF;IACF,OAAO;MACLD,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACjD;IAEA,IAAIoE,KAAK,EAAE;MACTrE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACAwC,UAAU,CAAC,MAAM;QACf,IAAI,CAACD,gBAAgB,CAAC,CAAC;MACzB,CAAC,EAAE,GAAG,CAAC;;MAEP;MACA,MAAMlE,UAAS,GAAIX,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACrD,IAAIU,UAAS,KAAM,SAAQ,IAAKA,UAAS,KAAM,WAAW,EAAE;QAC1D;QACAmE,UAAU,CAAC,MAAM;UACf,IAAI,CAAC1C,iBAAiB,CAAC,CAAC;QAC1B,CAAC,EAAE,GAAG,CAAC;;QAEP;QACA,IAAI,CAACpB,oBAAmB,GAAI2F,WAAW,CAAC,MAAM;UAC5C,IAAI,CAACvE,iBAAiB,CAAC,CAAC;QAC1B,CAAC,EAAE,KAAK,CAAC,EAAE;MACb;;MAEA;MACA,IAAI,CAACwE,oBAAmB,GAAI,MAAM;QAChCvE,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;QAE7C;QACA,IAAI7B,MAAM,EAAE;UACV,MAAMsE,gBAAe,GAAI/E,YAAY,CAACC,OAAO,CAAC,qBAAqBQ,MAAM,EAAE,CAAC;UAC5E,IAAIsE,gBAAe,IAAKA,gBAAgB,CAACT,UAAU,CAAC,aAAa,CAAC,EAAE;YAClEjC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;YACjE,IAAI,CAACvB,eAAc,GAAIgE,gBAAgB;UACzC;QACF;;QAEA;QACA,IAAI,CAACF,gBAAgB,CAAC,CAAC;MACzB,CAAC;MAEDJ,MAAM,CAACoC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAACD,oBAAoB,CAAC;;MAErE;MACA,IAAIjG,UAAU,EAAE;QACd,IAAI,CAACA,UAAS,GAAIA,UAAU;MAC9B;IACF,OAAO,IAAI8D,MAAM,CAACC,QAAQ,CAACoC,QAAO,KAAM,QAAO,IAAKrC,MAAM,CAACC,QAAQ,CAACoC,QAAO,KAAM,WAAW,EAAE;MAC5F;MACAzE,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAC5DmC,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,QAAQ;IACjC;EACF,CAAC;EAEDoC,aAAaA,CAAA,EAAG;IACd1E,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,IAAI,IAAI,CAACtB,oBAAoB,EAAE;MAC7BqB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C0E,aAAa,CAAC,IAAI,CAAChG,oBAAoB,CAAC;IAC1C;IAEA,IAAI,IAAI,CAAC4F,oBAAoB,EAAE;MAC7BvE,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrDmC,MAAM,CAACwC,mBAAmB,CAAC,iBAAiB,EAAE,IAAI,CAACL,oBAAoB,CAAC;IAC1E;EACF,CAAC;EAEDM,aAAaA,CAAA,EAAG;IACd;IACA,IAAI,IAAI,CAAClG,oBAAoB,EAAE;MAC7BgG,aAAa,CAAC,IAAI,CAAChG,oBAAoB,CAAC;IAC1C;;IAEA;IACAyD,MAAM,CAACwC,mBAAmB,CAAC,iBAAiB,EAAE,IAAI,CAACpC,gBAAgB,CAAC;EACtE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}