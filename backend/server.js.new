require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});require('dotenv').config();
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const authRoutes = require('./routes/auth');
const db = require('./config/database');

const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:8080', 'http://localhost:8081', 'http://localhost:5001'],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Comment out static file serving until we have the dist folder
// app.use(express.static('../frontend/dist'));

// Routes
app.use('/api/auth', authRoutes);

// API info route
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Login/Register API',
    endpoints: {
      login: '/api/auth/login',
      register: '/api/auth/register'
    }
  });
});

// Comment out frontend app serving until we have the dist folder
// app.get('*', (req, res) => {
//   res.sendFile('index.html', { root: '../frontend/dist' });
// });

// Temporary root route to show login form
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Login</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .login-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 300px;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .register-link {
          text-align: center;
          margin-top: 15px;
        }
        .register-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .register-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required value="natcha@gmail.com">
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required value="Natcha1234">
            <button type="button" id="togglePassword" style="background: none; border: none; color: #4CAF50; cursor: pointer; font-size: 14px; margin-top: 5px; padding: 0; text-align: right; width: 100%;">Show Password</button>
          </div>
          <button type="submit">Login</button>
          <div id="error" class="error"></div>
        </form>
        <div class="register-link">
          Don't have an account? <a href="/register">Register here</a>
        </div>
      </div>

      <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function() {
          const passwordInput = document.getElementById('password');
          const toggleBtn = document.getElementById('togglePassword');
          
          if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = 'Hide Password';
          } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = 'Show Password';
          }
        });
        
        // Regular login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const email = document.getElementById('email').value;
          const password = document.getElementById('password').value;
          const errorElement = document.getElementById('error');

          try {
            console.log('Attempting login with:', { email, password });
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('Login response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Login successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Login failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Login error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Register page
app.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Register</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          margin: 0;
          background-color: #f5f5f5;
        }
        .register-container {
          background-color: white;
          padding: 20px;
          border-radius: 5px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          width: 400px;
          max-height: 90vh;
          overflow-y: auto;
        }
        h2 {
          text-align: center;
          margin-bottom: 20px;
        }
        .form-group {
          margin-bottom: 15px;
        }
        label {
          display: block;
          margin-bottom: 5px;
          font-weight: bold;
        }
        input, textarea, select {
          width: 100%;
          padding: 8px;
          box-sizing: border-box;
          border: 1px solid #ddd;
          border-radius: 4px;
        }
        textarea {
          resize: vertical;
          min-height: 80px;
        }
        button {
          width: 100%;
          padding: 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        button:hover {
          background-color: #45a049;
        }
        .error {
          color: red;
          margin-top: 10px;
          text-align: center;
        }
        .login-link {
          text-align: center;
          margin-top: 15px;
        }
        .login-link a {
          color: #4CAF50;
          text-decoration: none;
        }
        .login-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="register-container">
        <h2>Register</h2>
        <form id="registerForm">
          <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" id="firstName" name="firstName" required>
          </div>
          <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" id="lastName" name="lastName" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" required>
          </div>
          <div class="form-group">
            <label for="address">Address</label>
            <textarea id="address" name="address" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="status">Status</label>
            <select id="status" name="status" required>
              <option value="">เลือกตำแหน่ง</option>
              <option value="headman">ผู้ใหญ่บ้าน</option>
              <option value="assistant">ผู้ช่วยผู้ใหญ่บ้าน</option>
              <option value="villager">ลูกบ้าน</option>
            </select>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
          </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
          </div>
          <button type="submit">Register</button>
          <div id="error" class="error"></div>
        </form>
        <div class="login-link">
          Already have an account? <a href="/">Login here</a>
        </div>
      </div>

      <script>
        document.getElementById('registerForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const firstName = document.getElementById('firstName').value;
          const lastName = document.getElementById('lastName').value;
          const email = document.getElementById('email').value;
          const phone = document.getElementById('phone').value;
          const address = document.getElementById('address').value;
          const status = document.getElementById('status').value;
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
          const errorElement = document.getElementById('error');

          if (password !== confirmPassword) {
            errorElement.textContent = 'Passwords do not match';
            return;
          }

          try {
            console.log('Attempting registration with new fields');
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                firstName, 
                lastName, 
                email, 
                phone, 
                address, 
                status, 
                password 
              })
            });

            const data = await response.json();
            console.log('Registration response:', data);

            if (response.ok) {
              // Save token and redirect
              localStorage.setItem('token', data.token);
              localStorage.setItem('userId', data.userId);
              localStorage.setItem('email', email);
              alert('Registration successful! Redirecting to home page...');
              window.location.href = '/home';
            } else {
              errorElement.textContent = data.message || 'Registration failed';
            }
          } catch (error) {
            errorElement.textContent = 'An error occurred. Please try again.';
            console.error('Registration error:', error);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// Home page with user approval functionality
app.get('/home', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Home</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
        }
        .logout-btn {
          padding: 8px 16px;
          background-color: #f44336;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .user-info {
          background-color: #f5f5f5;
          padding: 20px;
          border-radius: 5px;
          margin-top: 20px;
        }
        .nav-menu {
          display: flex;
          gap: 10px;
          margin-top: 20px;
        }
        .nav-btn {
          padding: 8px 16px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-decoration: none;
          text-align: center;
        }
        .pending-users {
          margin-top: 20px;
          display: none;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 10px;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f2f2f2;
        }
        tr:nth-child(even) {
          background-color: #f9f9f9;
        }
        .approve-btn {
          padding: 5px 10px;
          background-color: #4CAF50;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Welcome to Village Management System</h1>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
      
      <div class="user-info">
        <h2>User Information</h2>
        <p><strong>User ID:</strong> <span id="userId"></span></p>
        <p><strong>Email:</strong> <span id="userEmail"></span></p>
        <p><strong>Status:</strong> <span id="userStatus"></span></p>
      </div>
      
      <div class="nav-menu" id="adminMenu" style="display: none;">
        <button id="pendingUsersBtn" class="nav-btn">Pending Users</button>
      </div>
      
      <div id="pendingUsersSection" class="pending-users">
        <h2>Pending Users</h2>
        <p id="pendingMessage">Loading pending users...</p>
        <table id="pendingUsersTable" style="display: none;">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Status</th>
              <th>Registration Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="pendingUsersBody">
            <!-- Pending users will be added here -->
          </tbody>
        </table>
      </div>

      <script>
        // Check if user is logged in
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
        }

        // Display user info
        const userId = localStorage.getItem('userId') || '';
        const userEmail = localStorage.getItem('email') || '';
        let userStatus = '';
        
        document.getElementById('userId').textContent = userId;
        document.getElementById('userEmail').textContent = userEmail;
        
        // Fetch user details
        async function fetchUserDetails() {
          try {
            const response = await fetch('/api/auth/user', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              userStatus = data.user.status;
              document.getElementById('userStatus').textContent = formatStatus(userStatus);
              
              // Show admin menu for headman and assistant
              if (userStatus === 'headman' || userStatus === 'assistant') {
                document.getElementById('adminMenu').style.display = 'flex';
              }
            } else {
              // If we can't get user details, just use what we have in localStorage
              document.getElementById('userStatus').textContent = 'Unknown';
            }
          } catch (error) {
            console.error('Error fetching user details:', error);
            document.getElementById('userStatus').textContent = 'Unknown';
          }
        }
        
        // Format status for display
        function formatStatus(status) {
          switch(status) {
            case 'headman': return 'ผู้ใหญ่บ้าน';
            case 'assistant': return 'ผู้ช่วยผู้ใหญ่บ้าน';
            case 'villager': return 'ลูกบ้าน';
            default: return status;
          }
        }
        
        // Fetch pending users
        async function fetchPendingUsers() {
          try {
            const response = await fetch('/api/auth/pending-users', {
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              const pendingUsers = data.pendingUsers;
              
              if (pendingUsers.length === 0) {
                document.getElementById('pendingMessage').textContent = 'No pending users.';
                document.getElementById('pendingUsersTable').style.display = 'none';
              } else {
                document.getElementById('pendingMessage').style.display = 'none';
                document.getElementById('pendingUsersTable').style.display = 'table';
                
                const tbody = document.getElementById('pendingUsersBody');
                tbody.innerHTML = '';
                
                pendingUsers.forEach(user => {
                  const row = document.createElement('tr');
                  
                  const nameCell = document.createElement('td');
                  nameCell.textContent = user.first_name + ' ' + user.last_name;
                  
                  const emailCell = document.createElement('td');
                  emailCell.textContent = user.user_email;
                  
                  const phoneCell = document.createElement('td');
                  phoneCell.textContent = user.phone;
                  
                  const addressCell = document.createElement('td');
                  addressCell.textContent = user.address;
                  
                  const statusCell = document.createElement('td');
                  statusCell.textContent = formatStatus(user.status);
                  
                  const dateCell = document.createElement('td');
                  dateCell.textContent = new Date(user.created_at).toLocaleString();
                  
                  const actionCell = document.createElement('td');
                  const approveBtn = document.createElement('button');
                  approveBtn.textContent = 'Approve';
                  approveBtn.className = 'approve-btn';
                  approveBtn.onclick = () => approveUser(user.user_id);
                  actionCell.appendChild(approveBtn);
                  
                  row.appendChild(nameCell);
                  row.appendChild(emailCell);
                  row.appendChild(phoneCell);
                  row.appendChild(addressCell);
                  row.appendChild(statusCell);
                  row.appendChild(dateCell);
                  row.appendChild(actionCell);
                  
                  tbody.appendChild(row);
                });
              }
            } else {
              document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
            }
          } catch (error) {
            console.error('Error fetching pending users:', error);
            document.getElementById('pendingMessage').textContent = 'Error loading pending users.';
          }
        }
        
        // Approve user
        async function approveUser(userId) {
          try {
            const response = await fetch('/api/auth/approve/' + userId, {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });
            
            if (response.ok) {
              alert('User approved successfully!');
              fetchPendingUsers(); // Refresh the list
            } else {
              const data = await response.json();
              alert('Error: ' + (data.message || 'Failed to approve user'));
            }
          } catch (error) {
            console.error('Error approving user:', error);
            alert('Error approving user. Please try again.');
          }
        }
        
        // Event listeners
        document.getElementById('pendingUsersBtn').addEventListener('click', () => {
          const section = document.getElementById('pendingUsersSection');
          if (section.style.display === 'none' || section.style.display === '') {
            section.style.display = 'block';
            fetchPendingUsers();
          } else {
            section.style.display = 'none';
          }
        });

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', () => {
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
          localStorage.removeItem('email');
          window.location.href = '/';
        });
        
        // Initialize
        fetchUserDetails();
      </script>
    </body>
    </html>
  `);
});

// Add endpoint to get user details
app.get('/api/auth/user', (req, res) => {
  // Get token from header
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  
  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user details from database
    db.query('SELECT * FROM users WHERE user_id = ?', [decoded.userId])
      .then(([users]) => {
        if (users.length === 0) {
          return res.status(404).json({ message: 'User not found' });
        }
        
        const user = users[0];
        
        // Remove sensitive information
        delete user.user_password;
        
        res.status(200).json({
          message: 'User details retrieved successfully',
          user
        });
      })
      .catch(error => {
        console.error('Database error:', error);
        res.status(500).json({ message: 'Server error' });
      });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
});

// Test database connection
db.getConnection()
  .then(connection => {
    console.log('Database connected successfully');
    connection.release();
  })
  .catch(err => {
    console.error('Database connection error:', err);
  });

// Start server
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});