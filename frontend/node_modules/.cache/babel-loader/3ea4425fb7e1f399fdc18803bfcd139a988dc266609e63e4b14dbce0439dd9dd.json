{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: '/api',\n  // ใช้ URL แบบสัมพัทธ์เพื่อให้ทำงานได้กับ proxy ของ Vue\n  headers: {\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache'\n  },\n  timeout: 15000 // Increased timeout to 15 seconds\n});\n\n// Log the base URL for debugging\nconsole.log('API Client Base URL:', apiClient.defaults.baseURL);\n\n// Add a request interceptor\napiClient.interceptors.request.use(config => {\n  console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor for better error logging\napiClient.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} from ${response.config.url}`);\n  return response;\n}, error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('API Error Response:', {\n      status: error.response.status,\n      url: error.config.url,\n      data: error.response.data\n    });\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API No Response Error:', {\n      url: error.config.url,\n      request: error.request\n    });\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('API Setup Error:', error.message);\n  }\n  return Promise.reject(error);\n});\nconst api = {\n  // Auth endpoints\n  login(credentials) {\n    console.log('Login attempt with:', {\n      email: credentials.email,\n      passwordLength: credentials.password?.length || 0\n    });\n    return apiClient.post('/auth/login', credentials).then(response => {\n      // บันทึกข้อมูลผู้ใช้ลงใน localStorage\n      if (response.data && response.data.user && response.data.user.user_id) {\n        localStorage.setItem('userId', response.data.user.user_id);\n        console.log(`Saved user ID to localStorage: ${response.data.user.user_id}`);\n\n        // บันทึกข้อมูลอื่น ๆ ที่จำเป็น\n        if (response.data.user.status) {\n          localStorage.setItem('userStatus', response.data.user.status);\n        }\n        if (response.data.user.first_name && response.data.user.last_name) {\n          localStorage.setItem('userFullName', `${response.data.user.first_name} ${response.data.user.last_name}`);\n        }\n        if (response.data.user.user_email) {\n          localStorage.setItem('email', response.data.user.user_email);\n        }\n      }\n      return response;\n    }).catch(error => {\n      // Add specific error handling for login\n      if (!error.response) {\n        console.error('Login failed: Connection error');\n      }\n      throw error;\n    });\n  },\n  register(userData) {\n    return apiClient.post('/auth/register', userData);\n  },\n  // User management endpoints\n  getPendingUsers() {\n    return apiClient.get('/auth/pending-users');\n  },\n  approveUser(userId) {\n    return apiClient.put(`/auth/approve/${userId}`);\n  },\n  // User profile\n  getUserProfile() {\n    return apiClient.get('/auth/profile');\n  },\n  updateUserProfile(userData) {\n    return apiClient.put('/auth/profile', userData);\n  },\n  // Upload profile picture - ต้องระบุ userId เพื่อให้ตรงกับ route ที่กำหนดไว้\n  uploadProfilePicture(imageData) {\n    // ดึง userId จาก localStorage\n    const userId = localStorage.getItem('userId');\n    if (!userId) {\n      console.error('No userId found in localStorage when trying to upload profile picture');\n      return Promise.reject(new Error('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง'));\n    }\n    console.log(`Uploading profile picture for user ID: ${userId}`);\n\n    // ตรวจสอบว่า imageData มีรูปแบบที่ถูกต้อง\n    if (!imageData || !imageData.startsWith('data:image/')) {\n      console.error('Invalid image data format');\n      return Promise.reject(new Error('รูปแบบข้อมูลรูปภาพไม่ถูกต้อง'));\n    }\n\n    // บันทึกรูปภาพลงใน localStorage ทันทีก่อนส่งไปยังเซิร์ฟเวอร์\n    localStorage.setItem(`profilePictureUrl_${userId}`, imageData);\n    console.log(`Saved profile picture to localStorage for user ID: ${userId}`);\n\n    // บันทึกลงใน sessionStorage เป็นสำรอง\n    sessionStorage.setItem(`lastProfilePicture_${userId}`, imageData);\n    console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\n\n    // บันทึกเวลาที่อัปโหลดล่าสุด\n    const uploadTimestamp = new Date().getTime();\n    localStorage.setItem(`profilePictureTimestamp_${userId}`, uploadTimestamp.toString());\n    return apiClient.post(`/auth/upload-profile-picture/${userId}`, {\n      imageData\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache, no-store'\n      }\n    }).then(response => {\n      console.log('Profile picture upload successful:', response.data);\n\n      // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\n      if (response.data && response.data.profilePictureUrl) {\n        localStorage.setItem(`serverProfilePictureUrl_${userId}`, response.data.profilePictureUrl);\n        console.log(`Saved server profile picture URL for user ID: ${userId}`);\n      }\n\n      // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ\n      window.dispatchEvent(new CustomEvent('profile-updated'));\n      return response;\n    }).catch(error => {\n      console.error('Error uploading profile picture:', error);\n\n      // แม้ว่าจะมีข้อผิดพลาดในการอัปโหลดไปยังเซิร์ฟเวอร์\n      // แต่เรายังคงมีรูปภาพที่บันทึกไว้ใน localStorage และ sessionStorage\n      // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ\n      window.dispatchEvent(new CustomEvent('profile-updated'));\n      throw error;\n    });\n  },\n  // Get all users\n  getAllUsers() {\n    return apiClient.get('/auth/users');\n  },\n  // Get user by ID\n  getUserById(userId) {\n    return apiClient.get(`/auth/users/${userId}`);\n  },\n  // Update user\n  updateUser(userId, userData) {\n    return apiClient.put(`/auth/users/${userId}`, userData);\n  },\n  // Delete user\n  deleteUser(userId) {\n    return apiClient.delete(`/auth/users/${userId}`);\n  },\n  // Get pending users count\n  getPendingUsersCount() {\n    return apiClient.get('/auth/pending-users-count');\n  },\n  // Get dashboard data\n  getDashboardData() {\n    return apiClient.get('/auth/dashboard');\n  },\n  // Member management endpoints\n  getMembers() {\n    return apiClient.get('/members');\n  },\n  getMemberById(memberId) {\n    return apiClient.get(`/members/${memberId}`);\n  },\n  createMember(memberData) {\n    return apiClient.post('/members', memberData);\n  },\n  updateMember(memberId, memberData) {\n    return apiClient.put(`/members/${memberId}`, memberData);\n  },\n  deleteMember(memberId) {\n    return apiClient.delete(`/members/${memberId}`);\n  },\n  uploadFile(formData) {\n    return apiClient.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // Loan management endpoints\n  getLoans() {\n    return apiClient.get('/loans');\n  },\n  getLoanById(loanId) {\n    return apiClient.get(`/loans/${loanId}`);\n  },\n  createLoan(loanData) {\n    return apiClient.post('/loans', loanData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  updateLoan(loanId, loanData) {\n    return apiClient.put(`/loans/${loanId}`, loanData);\n  },\n  deleteLoan(loanId) {\n    return apiClient.delete(`/loans/${loanId}`);\n  },\n  // Guarantor management endpoints\n  getGuarantorsByLoanId(loanId) {\n    return apiClient.get(`/guarantors/loan/${loanId}`);\n  },\n  createGuarantor(guarantorData) {\n    return apiClient.post('/guarantors', guarantorData);\n  },\n  updateGuarantor(guarantorId, guarantorData) {\n    return apiClient.put(`/guarantors/${guarantorId}`, guarantorData);\n  },\n  deleteGuarantor(guarantorId) {\n    return apiClient.delete(`/guarantors/${guarantorId}`);\n  },\n  // Transaction management endpoints\n  getAllTransactions() {\n    return apiClient.get('/transactions');\n  },\n  getMemberTransactions(memberId) {\n    return apiClient.get(`/transactions/member/${memberId}`);\n  },\n  getMemberBalance(memberId) {\n    return apiClient.get(`/transactions/balance/${memberId}`);\n  },\n  depositMoney(data) {\n    return apiClient.post('/transactions/deposit', data);\n  },\n  withdrawMoney(data) {\n    return apiClient.post('/transactions/withdraw', data);\n  },\n  repayLoan(data) {\n    return apiClient.post('/transactions/loan-repayment', data);\n  },\n  withdrawLoan(data) {\n    return apiClient.post('/transactions/loan-withdrawal', data);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","timeout","console","log","defaults","interceptors","request","use","config","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","data","message","api","login","credentials","email","passwordLength","password","length","post","then","user","user_id","setItem","first_name","last_name","user_email","catch","register","userData","getPendingUsers","get","approveUser","userId","put","getUserProfile","updateUserProfile","uploadProfilePicture","imageData","Error","startsWith","sessionStorage","uploadTimestamp","Date","getTime","toString","profilePictureUrl","window","dispatchEvent","CustomEvent","getAllUsers","getUserById","updateUser","deleteUser","delete","getPendingUsersCount","getDashboardData","getMembers","getMemberById","memberId","createMember","memberData","updateMember","deleteMember","uploadFile","formData","getLoans","getLoanById","loanId","createLoan","loanData","updateLoan","deleteLoan","getGuarantorsByLoanId","createGuarantor","guarantorData","updateGuarantor","guarantorId","deleteGuarantor","getAllTransactions","getMemberTransactions","getMemberBalance","depositMoney","withdrawMoney","repayLoan","withdrawLoan"],"sources":["C:/Users/HP/Documents/GitHub/Mooban/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base URL\r\nconst apiClient = axios.create({\r\n  baseURL: '/api',  // ใช้ URL แบบสัมพัทธ์เพื่อให้ทำงานได้กับ proxy ของ Vue\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Cache-Control': 'no-cache'\r\n  },\r\n  timeout: 15000 // Increased timeout to 15 seconds\r\n});\r\n\r\n// Log the base URL for debugging\r\nconsole.log('API Client Base URL:', apiClient.defaults.baseURL);\r\n\r\n// Add a request interceptor\r\napiClient.interceptors.request.use(\r\n  config => {\r\n    console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor for better error logging\r\napiClient.interceptors.response.use(\r\n  response => {\r\n    console.log(`API Response: ${response.status} from ${response.config.url}`);\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.error('API Error Response:', {\r\n        status: error.response.status,\r\n        url: error.config.url,\r\n        data: error.response.data\r\n      });\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error('API No Response Error:', {\r\n        url: error.config.url,\r\n        request: error.request\r\n      });\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error('API Setup Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst api = {\r\n  // Auth endpoints\r\n  login(credentials) {\r\n    console.log('Login attempt with:', { email: credentials.email, passwordLength: credentials.password?.length || 0 });\r\n    return apiClient.post('/auth/login', credentials)\r\n      .then(response => {\r\n        // บันทึกข้อมูลผู้ใช้ลงใน localStorage\r\n        if (response.data && response.data.user && response.data.user.user_id) {\r\n          localStorage.setItem('userId', response.data.user.user_id);\r\n          console.log(`Saved user ID to localStorage: ${response.data.user.user_id}`);\r\n\r\n          // บันทึกข้อมูลอื่น ๆ ที่จำเป็น\r\n          if (response.data.user.status) {\r\n            localStorage.setItem('userStatus', response.data.user.status);\r\n          }\r\n          if (response.data.user.first_name && response.data.user.last_name) {\r\n            localStorage.setItem('userFullName', `${response.data.user.first_name} ${response.data.user.last_name}`);\r\n          }\r\n          if (response.data.user.user_email) {\r\n            localStorage.setItem('email', response.data.user.user_email);\r\n          }\r\n        }\r\n        return response;\r\n      })\r\n      .catch(error => {\r\n        // Add specific error handling for login\r\n        if (!error.response) {\r\n          console.error('Login failed: Connection error');\r\n        }\r\n        throw error;\r\n      });\r\n  },\r\n  register(userData) {\r\n    return apiClient.post('/auth/register', userData);\r\n  },\r\n  // User management endpoints\r\n  getPendingUsers() {\r\n    return apiClient.get('/auth/pending-users');\r\n  },\r\n  approveUser(userId) {\r\n    return apiClient.put(`/auth/approve/${userId}`);\r\n  },\r\n  // User profile\r\n  getUserProfile() {\r\n    return apiClient.get('/auth/profile');\r\n  },\r\n  updateUserProfile(userData) {\r\n    return apiClient.put('/auth/profile', userData);\r\n  },\r\n  // Upload profile picture - ต้องระบุ userId เพื่อให้ตรงกับ route ที่กำหนดไว้\r\n  uploadProfilePicture(imageData) {\r\n    // ดึง userId จาก localStorage\r\n    const userId = localStorage.getItem('userId');\r\n    if (!userId) {\r\n      console.error('No userId found in localStorage when trying to upload profile picture');\r\n      return Promise.reject(new Error('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง'));\r\n    }\r\n\r\n    console.log(`Uploading profile picture for user ID: ${userId}`);\r\n\r\n    // ตรวจสอบว่า imageData มีรูปแบบที่ถูกต้อง\r\n    if (!imageData || !imageData.startsWith('data:image/')) {\r\n      console.error('Invalid image data format');\r\n      return Promise.reject(new Error('รูปแบบข้อมูลรูปภาพไม่ถูกต้อง'));\r\n    }\r\n\r\n    // บันทึกรูปภาพลงใน localStorage ทันทีก่อนส่งไปยังเซิร์ฟเวอร์\r\n    localStorage.setItem(`profilePictureUrl_${userId}`, imageData);\r\n    console.log(`Saved profile picture to localStorage for user ID: ${userId}`);\r\n\r\n    // บันทึกลงใน sessionStorage เป็นสำรอง\r\n    sessionStorage.setItem(`lastProfilePicture_${userId}`, imageData);\r\n    console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\r\n\r\n    // บันทึกเวลาที่อัปโหลดล่าสุด\r\n    const uploadTimestamp = new Date().getTime();\r\n    localStorage.setItem(`profilePictureTimestamp_${userId}`, uploadTimestamp.toString());\r\n\r\n    return apiClient.post(`/auth/upload-profile-picture/${userId}`, { imageData }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'no-cache, no-store'\r\n      }\r\n    }).then(response => {\r\n      console.log('Profile picture upload successful:', response.data);\r\n\r\n      // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\r\n      if (response.data && response.data.profilePictureUrl) {\r\n        localStorage.setItem(`serverProfilePictureUrl_${userId}`, response.data.profilePictureUrl);\r\n        console.log(`Saved server profile picture URL for user ID: ${userId}`);\r\n      }\r\n\r\n      // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ\r\n      window.dispatchEvent(new CustomEvent('profile-updated'));\r\n\r\n      return response;\r\n    }).catch(error => {\r\n      console.error('Error uploading profile picture:', error);\r\n\r\n      // แม้ว่าจะมีข้อผิดพลาดในการอัปโหลดไปยังเซิร์ฟเวอร์\r\n      // แต่เรายังคงมีรูปภาพที่บันทึกไว้ใน localStorage และ sessionStorage\r\n      // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ\r\n      window.dispatchEvent(new CustomEvent('profile-updated'));\r\n\r\n      throw error;\r\n    });\r\n  },\r\n  // Get all users\r\n  getAllUsers() {\r\n    return apiClient.get('/auth/users');\r\n  },\r\n  // Get user by ID\r\n  getUserById(userId) {\r\n    return apiClient.get(`/auth/users/${userId}`);\r\n  },\r\n  // Update user\r\n  updateUser(userId, userData) {\r\n    return apiClient.put(`/auth/users/${userId}`, userData);\r\n  },\r\n  // Delete user\r\n  deleteUser(userId) {\r\n    return apiClient.delete(`/auth/users/${userId}`);\r\n  },\r\n  // Get pending users count\r\n  getPendingUsersCount() {\r\n    return apiClient.get('/auth/pending-users-count');\r\n  },\r\n  // Get dashboard data\r\n  getDashboardData() {\r\n    return apiClient.get('/auth/dashboard');\r\n  },\r\n\r\n  // Member management endpoints\r\n  getMembers() {\r\n    return apiClient.get('/members');\r\n  },\r\n  getMemberById(memberId) {\r\n    return apiClient.get(`/members/${memberId}`);\r\n  },\r\n  createMember(memberData) {\r\n    return apiClient.post('/members', memberData);\r\n  },\r\n  updateMember(memberId, memberData) {\r\n    return apiClient.put(`/members/${memberId}`, memberData);\r\n  },\r\n  deleteMember(memberId) {\r\n    return apiClient.delete(`/members/${memberId}`);\r\n  },\r\n  uploadFile(formData) {\r\n    return apiClient.post('/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  },\r\n\r\n  // Loan management endpoints\r\n  getLoans() {\r\n    return apiClient.get('/loans');\r\n  },\r\n  getLoanById(loanId) {\r\n    return apiClient.get(`/loans/${loanId}`);\r\n  },\r\n  createLoan(loanData) {\r\n    return apiClient.post('/loans', loanData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  },\r\n  updateLoan(loanId, loanData) {\r\n    return apiClient.put(`/loans/${loanId}`, loanData);\r\n  },\r\n  deleteLoan(loanId) {\r\n    return apiClient.delete(`/loans/${loanId}`);\r\n  },\r\n\r\n  // Guarantor management endpoints\r\n  getGuarantorsByLoanId(loanId) {\r\n    return apiClient.get(`/guarantors/loan/${loanId}`);\r\n  },\r\n  createGuarantor(guarantorData) {\r\n    return apiClient.post('/guarantors', guarantorData);\r\n  },\r\n  updateGuarantor(guarantorId, guarantorData) {\r\n    return apiClient.put(`/guarantors/${guarantorId}`, guarantorData);\r\n  },\r\n  deleteGuarantor(guarantorId) {\r\n    return apiClient.delete(`/guarantors/${guarantorId}`);\r\n  },\r\n\r\n  // Transaction management endpoints\r\n  getAllTransactions() {\r\n    return apiClient.get('/transactions');\r\n  },\r\n  getMemberTransactions(memberId) {\r\n    return apiClient.get(`/transactions/member/${memberId}`);\r\n  },\r\n  getMemberBalance(memberId) {\r\n    return apiClient.get(`/transactions/balance/${memberId}`);\r\n  },\r\n  depositMoney(data) {\r\n    return apiClient.post('/transactions/deposit', data);\r\n  },\r\n  withdrawMoney(data) {\r\n    return apiClient.post('/transactions/withdraw', data);\r\n  },\r\n  repayLoan(data) {\r\n    return apiClient.post('/transactions/loan-repayment', data);\r\n  },\r\n  withdrawLoan(data) { \r\n    return apiClient.post('/transactions/loan-withdrawal', data);\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}