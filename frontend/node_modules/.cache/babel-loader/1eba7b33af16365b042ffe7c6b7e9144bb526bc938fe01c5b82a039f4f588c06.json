{"ast":null,"code":"import { mapActions } from 'vuex';\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      email: '',\n      password: '',\n      error: null,\n      loading: false,\n      showPassword: false,\n      loginAttempts: 0,\n      isLocked: false,\n      lockCountdown: 0,\n      countdownInterval: null,\n      isPendingAccount: false,\n      isPendingAccount: false,\n      // Forgot password\n      showForgotPassword: false,\n      forgotPasswordStep: 'email',\n      // email, verify, reset, success\n      forgotPasswordEmail: '',\n      verificationCode: '',\n      newPassword: '',\n      confirmPassword: '',\n      forgotPasswordError: null,\n      sendingCode: false,\n      verifyingCode: false,\n      resettingPassword: false,\n      otpTimer: 0,\n      otpTimerInterval: null,\n      showNewPassword: false,\n      showConfirmPassword: false,\n      testVerificationCode: null // For testing only\n    };\n  },\n  created() {\n    // Check if there's a stored login attempt count in localStorage\n    const storedAttempts = localStorage.getItem('loginAttempts');\n    if (storedAttempts) {\n      this.loginAttempts = parseInt(storedAttempts);\n    }\n\n    // Check if account is locked\n    const lockExpiry = localStorage.getItem('lockExpiry');\n    if (lockExpiry) {\n      const expiryTime = parseInt(lockExpiry);\n      const currentTime = new Date().getTime();\n      if (expiryTime > currentTime) {\n        // Account is still locked\n        this.isLocked = true;\n        this.lockCountdown = Math.ceil((expiryTime - currentTime) / 1000);\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\n\n        // Start countdown\n        this.countdownInterval = setInterval(() => {\n          this.lockCountdown--;\n          this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\n          if (this.lockCountdown <= 0) {\n            this.unlockAccount();\n          }\n        }, 1000);\n      } else {\n        // Lock has expired\n        localStorage.removeItem('lockExpiry');\n      }\n    }\n  },\n  beforeUnmount() {\n    // Clear any intervals when component is destroyed\n    if (this.countdownInterval) {\n      clearInterval(this.countdownInterval);\n    }\n    if (this.otpTimerInterval) {\n      clearInterval(this.otpTimerInterval);\n    }\n  },\n  methods: {\n    ...mapActions(['login']),\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    async handleLogin() {\n      // Check if account is locked\n      if (this.isLocked) {\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      try {\n        await this.login({\n          email: this.email,\n          password: this.password\n        });\n\n        // Reset login attempts on successful login\n        this.loginAttempts = 0;\n        localStorage.removeItem('loginAttempts');\n        localStorage.removeItem('lockExpiry');\n\n        // Check user status to determine redirect page\n        const userStatus = localStorage.getItem('userStatus');\n        let redirectPath = '/';\n\n        // If user is headman or assistant, redirect to all-users page\n        if (userStatus === 'headman' || userStatus === 'assistant') {\n          redirectPath = '/all-users';\n        }\n\n        // Force page reload after successful login\n        window.location.href = redirectPath;\n      } catch (error) {\n        console.error('Login error:', error);\n\n        // Check if the error message contains \"locked\" or \"locked until\"\n        const errorMessage = error.response?.data?.message || '';\n        if (errorMessage.includes('locked') || errorMessage.includes('locked until')) {\n          // Override the server's lock with our own 10-second lock\n          this.lockAccount();\n          this.loading = false;\n          return;\n        }\n\n        // Check if account is pending approval\n        if (errorMessage.includes('pending approval') || error.response?.data?.isPending) {\n          this.isPendingAccount = true;\n          this.error = errorMessage || 'Your account is pending approval. Please contact the village headman.';\n          this.loading = false;\n          return;\n        } else {\n          this.isPendingAccount = false;\n        }\n        this.error = errorMessage || 'Login failed. Please try again.';\n        this.loading = false;\n\n        // Only increment login attempts if not a pending account\n        if (!this.isPendingAccount) {\n          this.loginAttempts++;\n          localStorage.setItem('loginAttempts', this.loginAttempts.toString());\n\n          // Lock account after 3 failed attempts\n          if (this.loginAttempts >= 3) {\n            this.lockAccount();\n          }\n        }\n      }\n    },\n    lockAccount() {\n      this.isLocked = true;\n      this.lockCountdown = 10; // 10 seconds\n      this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\n\n      // Store login attempts and lock expiry in localStorage\n      localStorage.setItem('loginAttempts', this.loginAttempts.toString());\n      const expiryTime = new Date().getTime() + this.lockCountdown * 1000;\n      localStorage.setItem('lockExpiry', expiryTime.toString());\n\n      // Clear any existing interval\n      if (this.countdownInterval) {\n        clearInterval(this.countdownInterval);\n      }\n\n      // Start countdown\n      this.countdownInterval = setInterval(() => {\n        this.lockCountdown--;\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\n        if (this.lockCountdown <= 0) {\n          this.unlockAccount();\n        }\n      }, 1000);\n    },\n    unlockAccount() {\n      this.isLocked = false;\n      this.loginAttempts = 0;\n\n      // Clear localStorage\n      localStorage.removeItem('loginAttempts');\n      localStorage.removeItem('lockExpiry');\n\n      // Clear the interval\n      if (this.countdownInterval) {\n        clearInterval(this.countdownInterval);\n        this.countdownInterval = null;\n      }\n      this.error = 'บัญชีถูกปลดล็อคแล้ว คุณสามารถลองเข้าสู่ระบบได้อีกครั้ง';\n    },\n    // Forgot password methods\n    async sendResetCode() {\n      if (!this.forgotPasswordEmail) {\n        this.forgotPasswordError = 'Please enter your email address';\n        return;\n      }\n      this.forgotPasswordError = null;\n      this.sendingCode = true;\n      this.testVerificationCode = null; // Reset test code\n\n      try {\n        // Call API to send verification code\n        const response = await fetch('/api/auth/forgot-password', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.forgotPasswordEmail\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Move to verification step\n          this.forgotPasswordStep = 'verify';\n\n          // Start OTP timer (5 minutes)\n          this.otpTimer = 300;\n          this.startOtpTimer();\n\n          // Store test verification code if provided by the API\n          if (data.code) {\n            this.testVerificationCode = data.code;\n            console.log('Test verification code:', data.code);\n          }\n        } else {\n          this.forgotPasswordError = data.message || 'Failed to send verification code';\n        }\n      } catch (error) {\n        console.error('Error sending reset code:', error);\n        this.forgotPasswordError = 'An error occurred. Please try again.';\n      } finally {\n        this.sendingCode = false;\n      }\n    },\n    startOtpTimer() {\n      // Clear any existing timer\n      if (this.otpTimerInterval) {\n        clearInterval(this.otpTimerInterval);\n      }\n\n      // Start countdown\n      this.otpTimerInterval = setInterval(() => {\n        this.otpTimer--;\n        if (this.otpTimer <= 0) {\n          clearInterval(this.otpTimerInterval);\n          this.otpTimerInterval = null;\n        }\n      }, 1000);\n    },\n    formatTime(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    },\n    async resendCode() {\n      if (this.otpTimer > 0) return;\n      await this.sendResetCode();\n    },\n    async verifyCode() {\n      if (!this.verificationCode) {\n        this.forgotPasswordError = 'Please enter the verification code';\n        return;\n      }\n      this.forgotPasswordError = null;\n      this.verifyingCode = true;\n      try {\n        // Call API to verify code\n        const response = await fetch('/api/auth/verify-reset-code', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.forgotPasswordEmail,\n            code: this.verificationCode\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Move to reset password step\n          this.forgotPasswordStep = 'reset';\n\n          // Clear the OTP timer\n          if (this.otpTimerInterval) {\n            clearInterval(this.otpTimerInterval);\n            this.otpTimerInterval = null;\n          }\n        } else {\n          this.forgotPasswordError = data.message || 'Invalid verification code';\n        }\n      } catch (error) {\n        console.error('Error verifying code:', error);\n        this.forgotPasswordError = 'An error occurred. Please try again.';\n      } finally {\n        this.verifyingCode = false;\n      }\n    },\n    async resetPassword() {\n      if (!this.newPassword) {\n        this.forgotPasswordError = 'Please enter a new password';\n        return;\n      }\n      if (this.newPassword !== this.confirmPassword) {\n        this.forgotPasswordError = 'Passwords do not match';\n        return;\n      }\n\n      // Validate password length (max 10 characters)\n      if (this.newPassword.length > 10) {\n        this.forgotPasswordError = 'Password must be 10 characters or less';\n        return;\n      }\n\n      // Validate password complexity\n      const hasUpperCase = /[A-Z]/.test(this.newPassword);\n      const hasLowerCase = /[a-z]/.test(this.newPassword);\n      const hasNumbers = /[0-9]/.test(this.newPassword);\n      if (!hasUpperCase || !hasLowerCase || !hasNumbers) {\n        this.forgotPasswordError = 'Password must contain uppercase letters, lowercase letters, and numbers';\n        return;\n      }\n      this.forgotPasswordError = null;\n      this.resettingPassword = true;\n      try {\n        // Call API to reset password\n        const response = await fetch('/api/auth/reset-password', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.forgotPasswordEmail,\n            code: this.verificationCode,\n            newPassword: this.newPassword\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Show success message\n          this.forgotPasswordStep = 'success';\n        } else {\n          this.forgotPasswordError = data.message || 'Failed to reset password';\n        }\n      } catch (error) {\n        console.error('Error resetting password:', error);\n        this.forgotPasswordError = 'An error occurred. Please try again.';\n      } finally {\n        this.resettingPassword = false;\n      }\n    },\n    closeForgotPassword() {\n      this.showForgotPassword = false;\n      this.forgotPasswordStep = 'email';\n      this.forgotPasswordEmail = '';\n      this.verificationCode = '';\n      this.newPassword = '';\n      this.confirmPassword = '';\n      this.forgotPasswordError = null;\n      if (this.otpTimerInterval) {\n        clearInterval(this.otpTimerInterval);\n        this.otpTimerInterval = null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","name","data","email","password","error","loading","showPassword","loginAttempts","isLocked","lockCountdown","countdownInterval","isPendingAccount","showForgotPassword","forgotPasswordStep","forgotPasswordEmail","verificationCode","newPassword","confirmPassword","forgotPasswordError","sendingCode","verifyingCode","resettingPassword","otpTimer","otpTimerInterval","showNewPassword","showConfirmPassword","testVerificationCode","created","storedAttempts","localStorage","getItem","parseInt","lockExpiry","expiryTime","currentTime","Date","getTime","Math","ceil","setInterval","unlockAccount","removeItem","beforeUnmount","clearInterval","methods","togglePasswordVisibility","handleLogin","login","userStatus","redirectPath","window","location","href","console","errorMessage","response","message","includes","lockAccount","isPending","setItem","toString","sendResetCode","fetch","method","headers","body","JSON","stringify","json","ok","startOtpTimer","code","log","formatTime","seconds","minutes","floor","remainingSeconds","resendCode","verifyCode","resetPassword","length","hasUpperCase","test","hasLowerCase","hasNumbers","closeForgotPassword"],"sources":["C:\\Users\\HP\\Documents\\mooban4\\frontend\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <h1>Login</h1>\r\n    <div class=\"form-container\">\r\n      <form @submit.prevent=\"handleLogin\">\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            v-model=\"email\"\r\n            required\r\n            placeholder=\"Enter your email\"\r\n          >\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <div class=\"password-input-container\">\r\n            <input\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              id=\"password\"\r\n              v-model=\"password\"\r\n              required\r\n              placeholder=\"Enter your password\"\r\n            >\r\n            <button\r\n              type=\"button\"\r\n              class=\"toggle-password-btn\"\r\n              @click=\"togglePasswordVisibility\"\r\n            >\r\n              <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" :disabled=\"loading || isLocked\">\r\n          {{ loading ? 'Logging in...' : (isLocked ? `รอ ${lockCountdown} วินาที` : 'Login') }}\r\n        </button>\r\n\r\n        <p v-if=\"error\" class=\"error-message\" :class=\"{ 'locked-message': isLocked }\">{{ error }}</p>\r\n        <p v-if=\"loginAttempts > 0 && !isLocked && !isPendingAccount\" class=\"warning-message\">\r\n          ความพยายามในการเข้าสู่ระบบที่ล้มเหลว: {{ loginAttempts }}/3\r\n        </p>\r\n      </form>\r\n\r\n      <p>\r\n        Don't have an account?\r\n        <router-link to=\"/register\" class=\"link\">Register here</router-link>\r\n      </p>\r\n      <p>\r\n        <a href=\"#\" class=\"link\" @click.prevent=\"showForgotPassword = true\">Forgot password?</a>\r\n      </p>\r\n\r\n      <!-- Forgot Password Modal -->\r\n      <div v-if=\"showForgotPassword\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <span class=\"close\" @click=\"showForgotPassword = false\">&times;</span>\r\n          <h2>Reset Password</h2>\r\n\r\n          <div v-if=\"forgotPasswordStep === 'email'\">\r\n            <p>Enter your email address to receive a verification code.</p>\r\n            <div class=\"form-group\">\r\n              <input\r\n                type=\"email\"\r\n                v-model=\"forgotPasswordEmail\"\r\n                placeholder=\"Enter your email\"\r\n                required\r\n              >\r\n            </div>\r\n            <button\r\n              @click=\"sendResetCode\"\r\n              :disabled=\"sendingCode || !forgotPasswordEmail\"\r\n              class=\"btn-primary\"\r\n            >\r\n              {{ sendingCode ? 'Sending...' : 'Send Verification Code' }}\r\n            </button>\r\n\r\n            <!-- Display verification code for testing -->\r\n            <div v-if=\"testVerificationCode\" class=\"test-code-box\">\r\n              <p>Test Verification Code:</p>\r\n              <div class=\"code-display\">{{ testVerificationCode }}</div>\r\n              <p class=\"note\">This is for testing only. In a real application, the code would be sent to your email.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-if=\"forgotPasswordStep === 'verify'\">\r\n            <p>Enter the verification code sent to your email.</p>\r\n            <div class=\"form-group otp-input\">\r\n              <input\r\n                type=\"text\"\r\n                v-model=\"verificationCode\"\r\n                placeholder=\"Enter verification code\"\r\n                maxlength=\"6\"\r\n                required\r\n              >\r\n            </div>\r\n            <p class=\"timer\" v-if=\"otpTimer > 0\">Code expires in: {{ formatTime(otpTimer) }}</p>\r\n            <button\r\n              @click=\"verifyCode\"\r\n              :disabled=\"verifyingCode || !verificationCode\"\r\n              class=\"btn-primary\"\r\n            >\r\n              {{ verifyingCode ? 'Verifying...' : 'Verify Code' }}\r\n            </button>\r\n            <p>\r\n              <a href=\"#\" @click.prevent=\"resendCode\" :class=\"{ 'disabled': otpTimer > 0 }\">\r\n                {{ otpTimer > 0 ? `Resend code in ${formatTime(otpTimer)}` : 'Resend code' }}\r\n              </a>\r\n            </p>\r\n          </div>\r\n\r\n          <div v-if=\"forgotPasswordStep === 'reset'\">\r\n            <p>Enter your new password.</p>\r\n            <div class=\"form-group\">\r\n              <input\r\n                :type=\"showNewPassword ? 'text' : 'password'\"\r\n                v-model=\"newPassword\"\r\n                placeholder=\"New password\"\r\n                required\r\n              >\r\n              <button\r\n                type=\"button\"\r\n                class=\"toggle-password-btn\"\r\n                @click=\"showNewPassword = !showNewPassword\"\r\n              >\r\n                <i :class=\"showNewPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </button>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <input\r\n                :type=\"showConfirmPassword ? 'text' : 'password'\"\r\n                v-model=\"confirmPassword\"\r\n                placeholder=\"Confirm new password\"\r\n                required\r\n              >\r\n              <button\r\n                type=\"button\"\r\n                class=\"toggle-password-btn\"\r\n                @click=\"showConfirmPassword = !showConfirmPassword\"\r\n              >\r\n                <i :class=\"showConfirmPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n              </button>\r\n            </div>\r\n            <p class=\"password-requirements\">\r\n              Password must be 10 characters or less and contain uppercase letters, lowercase letters, and numbers.\r\n            </p>\r\n            <button\r\n              @click=\"resetPassword\"\r\n              :disabled=\"resettingPassword || !newPassword || !confirmPassword || newPassword !== confirmPassword\"\r\n              class=\"btn-primary\"\r\n            >\r\n              {{ resettingPassword ? 'Resetting...' : 'Reset Password' }}\r\n            </button>\r\n          </div>\r\n\r\n          <div v-if=\"forgotPasswordStep === 'success'\">\r\n            <p class=\"success-message\">Your password has been reset successfully!</p>\r\n            <button @click=\"closeForgotPassword\" class=\"btn-primary\">Back to Login</button>\r\n          </div>\r\n\r\n          <p v-if=\"forgotPasswordError\" class=\"error-message\">{{ forgotPasswordError }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'LoginView',\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      error: null,\r\n      loading: false,\r\n      showPassword: false,\r\n      loginAttempts: 0,\r\n      isLocked: false,\r\n      lockCountdown: 0,\r\n      countdownInterval: null,\r\n      isPendingAccount: false,\r\n      isPendingAccount: false,\r\n\r\n      // Forgot password\r\n      showForgotPassword: false,\r\n      forgotPasswordStep: 'email', // email, verify, reset, success\r\n      forgotPasswordEmail: '',\r\n      verificationCode: '',\r\n      newPassword: '',\r\n      confirmPassword: '',\r\n      forgotPasswordError: null,\r\n      sendingCode: false,\r\n      verifyingCode: false,\r\n      resettingPassword: false,\r\n      otpTimer: 0,\r\n      otpTimerInterval: null,\r\n      showNewPassword: false,\r\n      showConfirmPassword: false,\r\n      testVerificationCode: null // For testing only\r\n    }\r\n  },\r\n  created() {\r\n    // Check if there's a stored login attempt count in localStorage\r\n    const storedAttempts = localStorage.getItem('loginAttempts');\r\n    if (storedAttempts) {\r\n      this.loginAttempts = parseInt(storedAttempts);\r\n    }\r\n\r\n    // Check if account is locked\r\n    const lockExpiry = localStorage.getItem('lockExpiry');\r\n    if (lockExpiry) {\r\n      const expiryTime = parseInt(lockExpiry);\r\n      const currentTime = new Date().getTime();\r\n\r\n      if (expiryTime > currentTime) {\r\n        // Account is still locked\r\n        this.isLocked = true;\r\n        this.lockCountdown = Math.ceil((expiryTime - currentTime) / 1000);\r\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\r\n\r\n        // Start countdown\r\n        this.countdownInterval = setInterval(() => {\r\n          this.lockCountdown--;\r\n          this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`;\r\n\r\n          if (this.lockCountdown <= 0) {\r\n            this.unlockAccount();\r\n          }\r\n        }, 1000);\r\n      } else {\r\n        // Lock has expired\r\n        localStorage.removeItem('lockExpiry');\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeUnmount() {\r\n    // Clear any intervals when component is destroyed\r\n    if (this.countdownInterval) {\r\n      clearInterval(this.countdownInterval);\r\n    }\r\n    if (this.otpTimerInterval) {\r\n      clearInterval(this.otpTimerInterval);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['login']),\r\n    togglePasswordVisibility() {\r\n      this.showPassword = !this.showPassword;\r\n    },\r\n    async handleLogin() {\r\n      // Check if account is locked\r\n      if (this.isLocked) {\r\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`\r\n        return\r\n      }\r\n\r\n      this.loading = true\r\n      this.error = null\r\n\r\n      try {\r\n        await this.login({\r\n          email: this.email,\r\n          password: this.password\r\n        })\r\n\r\n        // Reset login attempts on successful login\r\n        this.loginAttempts = 0\r\n        localStorage.removeItem('loginAttempts')\r\n        localStorage.removeItem('lockExpiry')\r\n\r\n        // Check user status to determine redirect page\r\n        const userStatus = localStorage.getItem('userStatus');\r\n        let redirectPath = '/';\r\n\r\n        // If user is headman or assistant, redirect to all-users page\r\n        if (userStatus === 'headman' || userStatus === 'assistant') {\r\n          redirectPath = '/all-users';\r\n        }\r\n\r\n        // Force page reload after successful login\r\n        window.location.href = redirectPath;\r\n      } catch (error) {\r\n        console.error('Login error:', error)\r\n\r\n        // Check if the error message contains \"locked\" or \"locked until\"\r\n        const errorMessage = error.response?.data?.message || '';\r\n        if (errorMessage.includes('locked') || errorMessage.includes('locked until')) {\r\n          // Override the server's lock with our own 10-second lock\r\n          this.lockAccount()\r\n          this.loading = false\r\n          return\r\n        }\r\n\r\n        // Check if account is pending approval\r\n        if (errorMessage.includes('pending approval') || error.response?.data?.isPending) {\r\n          this.isPendingAccount = true;\r\n          this.error = errorMessage || 'Your account is pending approval. Please contact the village headman.';\r\n          this.loading = false;\r\n          return;\r\n        } else {\r\n          this.isPendingAccount = false;\r\n        }\r\n\r\n        this.error = errorMessage || 'Login failed. Please try again.'\r\n        this.loading = false\r\n\r\n        // Only increment login attempts if not a pending account\r\n        if (!this.isPendingAccount) {\r\n          this.loginAttempts++\r\n          localStorage.setItem('loginAttempts', this.loginAttempts.toString())\r\n\r\n          // Lock account after 3 failed attempts\r\n          if (this.loginAttempts >= 3) {\r\n            this.lockAccount()\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    lockAccount() {\r\n      this.isLocked = true\r\n      this.lockCountdown = 10 // 10 seconds\r\n      this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`\r\n\r\n      // Store login attempts and lock expiry in localStorage\r\n      localStorage.setItem('loginAttempts', this.loginAttempts.toString())\r\n      const expiryTime = new Date().getTime() + (this.lockCountdown * 1000)\r\n      localStorage.setItem('lockExpiry', expiryTime.toString())\r\n\r\n      // Clear any existing interval\r\n      if (this.countdownInterval) {\r\n        clearInterval(this.countdownInterval)\r\n      }\r\n\r\n      // Start countdown\r\n      this.countdownInterval = setInterval(() => {\r\n        this.lockCountdown--\r\n        this.error = `บัญชีถูกล็อคชั่วคราว กรุณารอ ${this.lockCountdown} วินาที`\r\n\r\n        if (this.lockCountdown <= 0) {\r\n          this.unlockAccount()\r\n        }\r\n      }, 1000)\r\n    },\r\n\r\n    unlockAccount() {\r\n      this.isLocked = false\r\n      this.loginAttempts = 0\r\n\r\n      // Clear localStorage\r\n      localStorage.removeItem('loginAttempts')\r\n      localStorage.removeItem('lockExpiry')\r\n\r\n      // Clear the interval\r\n      if (this.countdownInterval) {\r\n        clearInterval(this.countdownInterval)\r\n        this.countdownInterval = null\r\n      }\r\n\r\n      this.error = 'บัญชีถูกปลดล็อคแล้ว คุณสามารถลองเข้าสู่ระบบได้อีกครั้ง'\r\n    },\r\n\r\n    // Forgot password methods\r\n    async sendResetCode() {\r\n      if (!this.forgotPasswordEmail) {\r\n        this.forgotPasswordError = 'Please enter your email address';\r\n        return;\r\n      }\r\n\r\n      this.forgotPasswordError = null;\r\n      this.sendingCode = true;\r\n      this.testVerificationCode = null; // Reset test code\r\n\r\n      try {\r\n        // Call API to send verification code\r\n        const response = await fetch('/api/auth/forgot-password', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ email: this.forgotPasswordEmail })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Move to verification step\r\n          this.forgotPasswordStep = 'verify';\r\n\r\n          // Start OTP timer (5 minutes)\r\n          this.otpTimer = 300;\r\n          this.startOtpTimer();\r\n\r\n          // Store test verification code if provided by the API\r\n          if (data.code) {\r\n            this.testVerificationCode = data.code;\r\n            console.log('Test verification code:', data.code);\r\n          }\r\n        } else {\r\n          this.forgotPasswordError = data.message || 'Failed to send verification code';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending reset code:', error);\r\n        this.forgotPasswordError = 'An error occurred. Please try again.';\r\n      } finally {\r\n        this.sendingCode = false;\r\n      }\r\n    },\r\n\r\n    startOtpTimer() {\r\n      // Clear any existing timer\r\n      if (this.otpTimerInterval) {\r\n        clearInterval(this.otpTimerInterval);\r\n      }\r\n\r\n      // Start countdown\r\n      this.otpTimerInterval = setInterval(() => {\r\n        this.otpTimer--;\r\n\r\n        if (this.otpTimer <= 0) {\r\n          clearInterval(this.otpTimerInterval);\r\n          this.otpTimerInterval = null;\r\n        }\r\n      }, 1000);\r\n    },\r\n\r\n    formatTime(seconds) {\r\n      const minutes = Math.floor(seconds / 60);\r\n      const remainingSeconds = seconds % 60;\r\n      return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\r\n    },\r\n\r\n    async resendCode() {\r\n      if (this.otpTimer > 0) return;\r\n\r\n      await this.sendResetCode();\r\n    },\r\n\r\n    async verifyCode() {\r\n      if (!this.verificationCode) {\r\n        this.forgotPasswordError = 'Please enter the verification code';\r\n        return;\r\n      }\r\n\r\n      this.forgotPasswordError = null;\r\n      this.verifyingCode = true;\r\n\r\n      try {\r\n        // Call API to verify code\r\n        const response = await fetch('/api/auth/verify-reset-code', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            email: this.forgotPasswordEmail,\r\n            code: this.verificationCode\r\n          })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Move to reset password step\r\n          this.forgotPasswordStep = 'reset';\r\n\r\n          // Clear the OTP timer\r\n          if (this.otpTimerInterval) {\r\n            clearInterval(this.otpTimerInterval);\r\n            this.otpTimerInterval = null;\r\n          }\r\n        } else {\r\n          this.forgotPasswordError = data.message || 'Invalid verification code';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error verifying code:', error);\r\n        this.forgotPasswordError = 'An error occurred. Please try again.';\r\n      } finally {\r\n        this.verifyingCode = false;\r\n      }\r\n    },\r\n\r\n    async resetPassword() {\r\n      if (!this.newPassword) {\r\n        this.forgotPasswordError = 'Please enter a new password';\r\n        return;\r\n      }\r\n\r\n      if (this.newPassword !== this.confirmPassword) {\r\n        this.forgotPasswordError = 'Passwords do not match';\r\n        return;\r\n      }\r\n\r\n      // Validate password length (max 10 characters)\r\n      if (this.newPassword.length > 10) {\r\n        this.forgotPasswordError = 'Password must be 10 characters or less';\r\n        return;\r\n      }\r\n\r\n      // Validate password complexity\r\n      const hasUpperCase = /[A-Z]/.test(this.newPassword);\r\n      const hasLowerCase = /[a-z]/.test(this.newPassword);\r\n      const hasNumbers = /[0-9]/.test(this.newPassword);\r\n\r\n      if (!hasUpperCase || !hasLowerCase || !hasNumbers) {\r\n        this.forgotPasswordError = 'Password must contain uppercase letters, lowercase letters, and numbers';\r\n        return;\r\n      }\r\n\r\n      this.forgotPasswordError = null;\r\n      this.resettingPassword = true;\r\n\r\n      try {\r\n        // Call API to reset password\r\n        const response = await fetch('/api/auth/reset-password', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            email: this.forgotPasswordEmail,\r\n            code: this.verificationCode,\r\n            newPassword: this.newPassword\r\n          })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Show success message\r\n          this.forgotPasswordStep = 'success';\r\n        } else {\r\n          this.forgotPasswordError = data.message || 'Failed to reset password';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error resetting password:', error);\r\n        this.forgotPasswordError = 'An error occurred. Please try again.';\r\n      } finally {\r\n        this.resettingPassword = false;\r\n      }\r\n    },\r\n\r\n    closeForgotPassword() {\r\n      this.showForgotPassword = false;\r\n      this.forgotPasswordStep = 'email';\r\n      this.forgotPasswordEmail = '';\r\n      this.verificationCode = '';\r\n      this.newPassword = '';\r\n      this.confirmPassword = '';\r\n      this.forgotPasswordError = null;\r\n\r\n      if (this.otpTimerInterval) {\r\n        clearInterval(this.otpTimerInterval);\r\n        this.otpTimerInterval = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.login {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 80vh;\r\n  padding: 20px;\r\n}\r\n\r\n.form-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  padding: 30px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 30px;\r\n  font-size: 28px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\ninput:focus {\r\n  border-color: #4CAF50;\r\n  outline: none;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\nbutton[type=\"submit\"] {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton[type=\"submit\"]:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\nbutton[type=\"submit\"]:disabled {\r\n  background-color: #9e9e9e;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.error-message {\r\n  color: #f44336;\r\n  margin-top: 15px;\r\n  text-align: center;\r\n}\r\n\r\n.locked-message {\r\n  color: #ff9800;\r\n  font-weight: bold;\r\n}\r\n\r\n.warning-message {\r\n  color: #ff9800;\r\n  margin-top: 10px;\r\n  text-align: center;\r\n  font-size: 14px;\r\n}\r\n\r\np {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #666;\r\n}\r\n\r\n.link {\r\n  color: #4CAF50;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.password-input-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.password-input-container input {\r\n  width: 100%;\r\n  padding-right: 40px; /* Make room for the button */\r\n}\r\n\r\n.toggle-password-btn {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  background: none;\r\n  border: none;\r\n  color: #666;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.toggle-password-btn:hover {\r\n  color: #333;\r\n}\r\n\r\n.toggle-password-btn:focus {\r\n  outline: none;\r\n}\r\n\r\n/* Modal styles */\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  background-color: white;\r\n  padding: 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);\r\n  width: 90%;\r\n  max-width: 400px;\r\n  position: relative;\r\n}\r\n\r\n.close {\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 20px;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  color: #666;\r\n}\r\n\r\n.close:hover {\r\n  color: #333;\r\n}\r\n\r\n.modal h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.otp-input input {\r\n  letter-spacing: 4px;\r\n  font-size: 18px;\r\n  text-align: center;\r\n}\r\n\r\n.timer {\r\n  text-align: center;\r\n  color: #666;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.success-message {\r\n  color: #4CAF50;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  margin: 20px 0;\r\n}\r\n\r\n.btn-primary {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-top: 10px;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  background-color: #9e9e9e;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.password-requirements {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\na.disabled {\r\n  color: #999;\r\n  cursor: not-allowed;\r\n  text-decoration: none;\r\n}\r\n\r\n.test-code-box {\r\n  background-color: #f8f9fa;\r\n  border: 1px dashed #ccc;\r\n  border-radius: 5px;\r\n  padding: 15px;\r\n  margin: 15px 0;\r\n  text-align: center;\r\n}\r\n\r\n.test-code {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  letter-spacing: 5px;\r\n  color: #4CAF50;\r\n  margin: 10px 0;\r\n  background-color: #fff;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.test-note {\r\n  font-size: 12px;\r\n  color: #666;\r\n  font-style: italic;\r\n  margin-top: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}