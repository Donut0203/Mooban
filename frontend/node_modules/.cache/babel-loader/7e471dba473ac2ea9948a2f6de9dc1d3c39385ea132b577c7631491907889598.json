{"ast":null,"code":"import { mapActions } from 'vuex';\nexport default {\n  name: 'RegisterView',\n  data() {\n    return {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      address: '',\n      password: '',\n      confirmPassword: '',\n      error: null,\n      loading: false,\n      showPassword: false,\n      showConfirmPassword: false\n    };\n  },\n  methods: {\n    ...mapActions(['register']),\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    },\n    toggleConfirmPasswordVisibility() {\n      this.showConfirmPassword = !this.showConfirmPassword;\n    },\n    validateEmail(email) {\n      // Check if email contains uppercase letters\n      if (/[A-Z]/.test(email)) {\n        return 'Email must be in lowercase only';\n      }\n\n      // Check if email is valid\n      const emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/;\n      if (!emailRegex.test(email)) {\n        return 'Please enter a valid email address (lowercase only)';\n      }\n      return null; // No error\n    },\n    validatePassword(password) {\n      // Check length\n      if (password.length > 10) {\n        return 'Password must be 10 characters or less';\n      }\n\n      // Check for uppercase, lowercase, and numbers\n      const hasUpperCase = /[A-Z]/.test(password);\n      const hasLowerCase = /[a-z]/.test(password);\n      const hasNumbers = /[0-9]/.test(password);\n      if (!hasUpperCase || !hasLowerCase || !hasNumbers) {\n        return 'Password must contain uppercase letters, lowercase letters, and numbers';\n      }\n      return null; // No error\n    },\n    async handleRegister() {\n      // Validate email (must be lowercase)\n      const emailError = this.validateEmail(this.email);\n      if (emailError) {\n        this.error = emailError;\n        return;\n      }\n\n      // Validate password\n      const passwordError = this.validatePassword(this.password);\n      if (passwordError) {\n        this.error = passwordError;\n        return;\n      }\n\n      // Validate passwords match\n      if (this.password !== this.confirmPassword) {\n        this.error = 'Passwords do not match';\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      try {\n        await this.register({\n          email: this.email,\n          password: this.password,\n          firstName: this.firstName,\n          lastName: this.lastName,\n          phone: this.phone,\n          address: this.address,\n          status: 'pending' // Default status for new users\n        });\n\n        // Redirect to home page after successful registration\n        window.location.href = '/';\n      } catch (error) {\n        console.error('Registration error:', error);\n        this.error = error.response?.data?.message || 'Registration failed. Please try again.';\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","name","data","firstName","lastName","email","phone","address","password","confirmPassword","error","loading","showPassword","showConfirmPassword","methods","togglePasswordVisibility","toggleConfirmPasswordVisibility","validateEmail","test","emailRegex","validatePassword","length","hasUpperCase","hasLowerCase","hasNumbers","handleRegister","emailError","passwordError","register","status","window","location","href","console","response","message"],"sources":["C:\\Users\\HP\\Documents\\mooban4\\frontend\\src\\views\\RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register\">\r\n    <div class=\"register-container\">\r\n      <h2>Register</h2>\r\n      <form @submit.prevent=\"handleRegister\" id=\"registerForm\">\r\n        <div class=\"form-group\">\r\n          <label for=\"firstName\">First Name</label>\r\n          <input type=\"text\" id=\"firstName\" v-model=\"firstName\" name=\"firstName\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"lastName\">Last Name</label>\r\n          <input type=\"text\" id=\"lastName\" v-model=\"lastName\" name=\"lastName\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email (lowercase only)</label>\r\n          <input type=\"email\" id=\"email\" v-model=\"email\" name=\"email\" required placeholder=\"example@domain.com\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"phone\">Phone Number</label>\r\n          <input type=\"tel\" id=\"phone\" v-model=\"phone\" name=\"phone\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"address\">Address</label>\r\n          <input type=\"text\" id=\"address\" v-model=\"address\" name=\"address\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <div class=\"password-input-container\">\r\n            <input\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              id=\"password\"\r\n              v-model=\"password\"\r\n              name=\"password\"\r\n              required\r\n            >\r\n            <button\r\n              type=\"button\"\r\n              class=\"toggle-password-btn\"\r\n              @click=\"togglePasswordVisibility\"\r\n            >\r\n              <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n            </button>\r\n          </div>\r\n          <p class=\"password-requirements\">\r\n            Password must be 10 characters or less and contain uppercase letters, lowercase letters, and numbers.\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">Confirm Password</label>\r\n          <div class=\"password-input-container\">\r\n            <input\r\n              :type=\"showConfirmPassword ? 'text' : 'password'\"\r\n              id=\"confirmPassword\"\r\n              v-model=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              required\r\n            >\r\n            <button\r\n              type=\"button\"\r\n              class=\"toggle-password-btn\"\r\n              @click=\"toggleConfirmPasswordVisibility\"\r\n            >\r\n              <i :class=\"showConfirmPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" id=\"registerButton\" :disabled=\"loading\">\r\n          {{ loading ? 'Registering...' : 'Register' }}\r\n        </button>\r\n        <div v-if=\"error\" id=\"error\" class=\"error\">{{ error }}</div>\r\n      </form>\r\n      <div class=\"login-link\">\r\n        Already have an account? <router-link to=\"/login\">Login here</router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'RegisterView',\r\n  data() {\r\n    return {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      phone: '',\r\n      address: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      error: null,\r\n      loading: false,\r\n      showPassword: false,\r\n      showConfirmPassword: false\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions(['register']),\r\n    togglePasswordVisibility() {\r\n      this.showPassword = !this.showPassword;\r\n    },\r\n    toggleConfirmPasswordVisibility() {\r\n      this.showConfirmPassword = !this.showConfirmPassword;\r\n    },\r\n    validateEmail(email) {\r\n      // Check if email contains uppercase letters\r\n      if (/[A-Z]/.test(email)) {\r\n        return 'Email must be in lowercase only';\r\n      }\r\n\r\n      // Check if email is valid\r\n      const emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$/;\r\n      if (!emailRegex.test(email)) {\r\n        return 'Please enter a valid email address (lowercase only)';\r\n      }\r\n\r\n      return null; // No error\r\n    },\r\n    validatePassword(password) {\r\n      // Check length\r\n      if (password.length > 10) {\r\n        return 'Password must be 10 characters or less';\r\n      }\r\n\r\n      // Check for uppercase, lowercase, and numbers\r\n      const hasUpperCase = /[A-Z]/.test(password);\r\n      const hasLowerCase = /[a-z]/.test(password);\r\n      const hasNumbers = /[0-9]/.test(password);\r\n\r\n      if (!hasUpperCase || !hasLowerCase || !hasNumbers) {\r\n        return 'Password must contain uppercase letters, lowercase letters, and numbers';\r\n      }\r\n\r\n      return null; // No error\r\n    },\r\n    async handleRegister() {\r\n      // Validate email (must be lowercase)\r\n      const emailError = this.validateEmail(this.email);\r\n      if (emailError) {\r\n        this.error = emailError;\r\n        return;\r\n      }\r\n\r\n      // Validate password\r\n      const passwordError = this.validatePassword(this.password);\r\n      if (passwordError) {\r\n        this.error = passwordError;\r\n        return;\r\n      }\r\n\r\n      // Validate passwords match\r\n      if (this.password !== this.confirmPassword) {\r\n        this.error = 'Passwords do not match';\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      this.error = null;\r\n\r\n      try {\r\n        await this.register({\r\n          email: this.email,\r\n          password: this.password,\r\n          firstName: this.firstName,\r\n          lastName: this.lastName,\r\n          phone: this.phone,\r\n          address: this.address,\r\n          status: 'pending' // Default status for new users\r\n        });\r\n\r\n        // Redirect to home page after successful registration\r\n        window.location.href = '/';\r\n      } catch (error) {\r\n        console.error('Registration error:', error);\r\n        this.error = error.response?.data?.message || 'Registration failed. Please try again.';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.register {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background-color: #f5f5f5;\r\n  padding: 20px;\r\n}\r\n\r\n.register-container {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  padding: 30px;\r\n  width: 100%;\r\n  max-width: 500px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 25px;\r\n  font-size: 24px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\ninput:focus {\r\n  border-color: #4CAF50;\r\n  outline: none;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.password-input-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.password-input-container input {\r\n  width: 100%;\r\n  padding-right: 40px; /* Make room for the button */\r\n}\r\n\r\n.toggle-password-btn {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  background: none;\r\n  border: none;\r\n  color: #666;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.toggle-password-btn:hover {\r\n  color: #333;\r\n}\r\n\r\n.toggle-password-btn:focus {\r\n  outline: none;\r\n}\r\n\r\n.password-requirements {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-top: 5px;\r\n  margin-bottom: 0;\r\n}\r\n\r\nbutton[type=\"submit\"] {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton[type=\"submit\"]:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\nbutton[type=\"submit\"]:disabled {\r\n  background-color: #9e9e9e;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.error {\r\n  color: #f44336;\r\n  margin-top: 15px;\r\n  text-align: center;\r\n  font-size: 14px;\r\n}\r\n\r\n.login-link {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.login-link a {\r\n  color: #4CAF50;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n}\r\n\r\n.login-link a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .register-container {\r\n    padding: 20px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 22px;\r\n  }\r\n\r\n  input, button[type=\"submit\"] {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>"],"mappings":"AA+EA,SAASA,UAAS,QAAS,MAAK;AAEhC,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,KAAK;MACdC,YAAY,EAAE,KAAK;MACnBC,mBAAmB,EAAE;IACvB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,GAAGd,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC;IAC3Be,wBAAwBA,CAAA,EAAG;MACzB,IAAI,CAACH,YAAW,GAAI,CAAC,IAAI,CAACA,YAAY;IACxC,CAAC;IACDI,+BAA+BA,CAAA,EAAG;MAChC,IAAI,CAACH,mBAAkB,GAAI,CAAC,IAAI,CAACA,mBAAmB;IACtD,CAAC;IACDI,aAAaA,CAACZ,KAAK,EAAE;MACnB;MACA,IAAI,OAAO,CAACa,IAAI,CAACb,KAAK,CAAC,EAAE;QACvB,OAAO,iCAAiC;MAC1C;;MAEA;MACA,MAAMc,UAAS,GAAI,yCAAyC;MAC5D,IAAI,CAACA,UAAU,CAACD,IAAI,CAACb,KAAK,CAAC,EAAE;QAC3B,OAAO,qDAAqD;MAC9D;MAEA,OAAO,IAAI,EAAE;IACf,CAAC;IACDe,gBAAgBA,CAACZ,QAAQ,EAAE;MACzB;MACA,IAAIA,QAAQ,CAACa,MAAK,GAAI,EAAE,EAAE;QACxB,OAAO,wCAAwC;MACjD;;MAEA;MACA,MAAMC,YAAW,GAAI,OAAO,CAACJ,IAAI,CAACV,QAAQ,CAAC;MAC3C,MAAMe,YAAW,GAAI,OAAO,CAACL,IAAI,CAACV,QAAQ,CAAC;MAC3C,MAAMgB,UAAS,GAAI,OAAO,CAACN,IAAI,CAACV,QAAQ,CAAC;MAEzC,IAAI,CAACc,YAAW,IAAK,CAACC,YAAW,IAAK,CAACC,UAAU,EAAE;QACjD,OAAO,yEAAyE;MAClF;MAEA,OAAO,IAAI,EAAE;IACf,CAAC;IACD,MAAMC,cAAcA,CAAA,EAAG;MACrB;MACA,MAAMC,UAAS,GAAI,IAAI,CAACT,aAAa,CAAC,IAAI,CAACZ,KAAK,CAAC;MACjD,IAAIqB,UAAU,EAAE;QACd,IAAI,CAAChB,KAAI,GAAIgB,UAAU;QACvB;MACF;;MAEA;MACA,MAAMC,aAAY,GAAI,IAAI,CAACP,gBAAgB,CAAC,IAAI,CAACZ,QAAQ,CAAC;MAC1D,IAAImB,aAAa,EAAE;QACjB,IAAI,CAACjB,KAAI,GAAIiB,aAAa;QAC1B;MACF;;MAEA;MACA,IAAI,IAAI,CAACnB,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,IAAI,CAACC,KAAI,GAAI,wBAAwB;QACrC;MACF;MAEA,IAAI,CAACC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACD,KAAI,GAAI,IAAI;MAEjB,IAAI;QACF,MAAM,IAAI,CAACkB,QAAQ,CAAC;UAClBvB,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBG,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBL,SAAS,EAAE,IAAI,CAACA,SAAS;UACzBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBE,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBsB,MAAM,EAAE,SAAQ,CAAE;QACpB,CAAC,CAAC;;QAEF;QACAC,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,GAAG;MAC5B,EAAE,OAAOtB,KAAK,EAAE;QACduB,OAAO,CAACvB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,IAAI,CAACA,KAAI,GAAIA,KAAK,CAACwB,QAAQ,EAAEhC,IAAI,EAAEiC,OAAM,IAAK,wCAAwC;MACxF,UAAU;QACR,IAAI,CAACxB,OAAM,GAAI,KAAK;MACtB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}