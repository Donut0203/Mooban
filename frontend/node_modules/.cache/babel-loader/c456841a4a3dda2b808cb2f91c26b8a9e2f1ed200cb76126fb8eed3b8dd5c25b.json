{"ast":null,"code":"import api from '@/services/api';\nimport axios from 'axios';\nexport default {\n  name: 'ProfileViewSimple',\n  data() {\n    return {\n      userProfile: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        address: '',\n        status: '',\n        approvedBy: '',\n        updatedAt: null\n      },\n      profilePictureUrl: null,\n      isLoading: false,\n      errors: {\n        firstName: '',\n        lastName: ''\n      },\n      alert: {\n        show: false,\n        message: '',\n        type: 'success'\n      }\n    };\n  },\n  computed: {\n    userInitial() {\n      return this.userProfile.email ? this.userProfile.email.charAt(0).toUpperCase() : '?';\n    }\n  },\n  methods: {\n    async fetchUserProfile() {\n      try {\n        this.isLoading = true;\n        console.log('Fetching user profile...');\n\n        // ดึง userId จาก localStorage\n        const userId = localStorage.getItem('userId');\n\n        // ตรวจสอบรูปภาพจาก localStorage ก่อน (เพราะเชื่อถือได้มากที่สุด)\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          console.log(`Using stored profile picture for user ID: ${userId}`);\n          this.profilePictureUrl = storedPictureUrl;\n        }\n        // ถ้าไม่มีใน localStorage ให้ตรวจสอบใน sessionStorage\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n          console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n          this.profilePictureUrl = lastPicture;\n          // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n        }\n        // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ตรวจสอบ URL ของเซิร์ฟเวอร์\n        else {\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n          if (serverPictureUrl) {\n            const timestamp = new Date().getTime();\n            this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\n          }\n        }\n\n        // ดึงข้อมูลโปรไฟล์จาก API\n        const response = await api.getUserProfile();\n        console.log('User profile response:', response.data);\n        const userData = response.data.user;\n        if (!userData) {\n          console.error('No user data found in response:', response.data);\n          this.showAlert('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง', 'error');\n          return;\n        }\n\n        // แสดงข้อมูลทั้งหมดที่ได้รับจาก API เพื่อตรวจสอบ\n        console.log('All user data fields:', userData);\n\n        // ดึงข้อมูลจาก localStorage ถ้าไม่มีข้อมูลจาก API\n        this.userProfile = {\n          firstName: userData.first_name || localStorage.getItem('userFirstName') || '',\n          lastName: userData.last_name || localStorage.getItem('userLastName') || '',\n          email: userData.user_email || localStorage.getItem('email') || '',\n          phone: userData.phone || localStorage.getItem('userPhone') || '',\n          address: userData.address || localStorage.getItem('userAddress') || '',\n          status: userData.status || localStorage.getItem('userStatus') || '',\n          approvedBy: userData.approved_by || userData.approvedBy || localStorage.getItem('userApprovedBy') || '',\n          updatedAt: userData.updated_at || userData.updatedAt || localStorage.getItem('userUpdatedAt') || null\n        };\n\n        // บันทึกข้อมูลลง localStorage เพื่อใช้ในกรณีที่ API ไม่ทำงาน\n        localStorage.setItem('userFirstName', this.userProfile.firstName);\n        localStorage.setItem('userLastName', this.userProfile.lastName);\n        localStorage.setItem('userPhone', this.userProfile.phone);\n        localStorage.setItem('userAddress', this.userProfile.address);\n        localStorage.setItem('userId', userData.user_id || userId);\n        localStorage.setItem('userApprovedBy', this.userProfile.approvedBy || '');\n        localStorage.setItem('userUpdatedAt', this.userProfile.updatedAt || '');\n\n        // ถ้ายังไม่มีรูปภาพและ API มีรูปภาพ\n        if (!this.profilePictureUrl && userData.profile_picture) {\n          // For external URLs (like randomuser.me), use directly\n          if (userData.profile_picture.startsWith('http')) {\n            this.profilePictureUrl = userData.profile_picture;\n          } else {\n            // For server URLs, add timestamp and use relative path\n            const timestamp = new Date().getTime();\n            // ใช้ URL แบบสัมพัทธ์เพื่อให้ทำงานได้กับ proxy ของ Vue\n            const serverUrl = `${userData.profile_picture}?t=${timestamp}`;\n            this.profilePictureUrl = serverUrl;\n\n            // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\n            localStorage.setItem(`serverProfilePictureUrl_${userId}`, userData.profile_picture);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n\n        // แม้ว่า API จะล้มเหลว ให้พยายามใช้รูปภาพที่เก็บไว้\n        const userId = localStorage.getItem('userId');\n\n        // ตรวจสอบ localStorage ก่อน\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          console.log(`Using profile picture from localStorage after API error for user ID: ${userId}`);\n          this.profilePictureUrl = storedPictureUrl;\n        }\n        // จากนั้นตรวจสอบ sessionStorage\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n          console.log(`Using last profile picture from sessionStorage after API error for user ID: ${userId}`);\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n          this.profilePictureUrl = lastPicture;\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n        }\n        // ถ้าไม่มีรูปภาพใน localStorage หรือ sessionStorage ให้ใช้รูปภาพจาก serverProfilePictureUrl\n        else {\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n          if (serverPictureUrl) {\n            const timestamp = new Date().getTime();\n            this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\n          }\n        }\n        this.showAlert('ไม่สามารถโหลดข้อมูลโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง', 'error');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    validateForm() {\n      let isValid = true;\n      this.errors.firstName = '';\n      this.errors.lastName = '';\n      if (!this.userProfile.firstName.trim()) {\n        this.errors.firstName = 'กรุณากรอกชื่อ';\n        isValid = false;\n      }\n      if (!this.userProfile.lastName.trim()) {\n        this.errors.lastName = 'กรุณากรอกนามสกุล';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async saveProfile() {\n      if (!this.validateForm()) {\n        return;\n      }\n      try {\n        this.isLoading = true;\n        console.log('Saving profile data:', this.userProfile);\n        const response = await api.updateUserProfile({\n          firstName: this.userProfile.firstName,\n          lastName: this.userProfile.lastName,\n          phone: this.userProfile.phone,\n          address: this.userProfile.address\n        });\n        console.log('Profile updated:', response.data);\n\n        // บันทึกข้อมูลลง localStorage เพื่อใช้ในกรณีที่ API ไม่ทำงาน\n        localStorage.setItem('userFirstName', this.userProfile.firstName);\n        localStorage.setItem('userLastName', this.userProfile.lastName);\n        localStorage.setItem('userPhone', this.userProfile.phone);\n        localStorage.setItem('userAddress', this.userProfile.address);\n        this.showAlert('อัปเดตโปรไฟล์เรียบร้อยแล้ว', 'success');\n\n        // โหลดข้อมูลใหม่เพื่อให้แน่ใจว่าข้อมูลถูกต้อง\n        await this.fetchUserProfile();\n      } catch (error) {\n        console.error('Error updating profile:', error);\n        this.showAlert('ไม่สามารถอัปเดตโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง', 'error');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    triggerPhotoUpload() {\n      // Trigger the file input click\n      this.$refs.photoInput.click();\n    },\n    async handleFileSelected(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // Validate file is an image - ตรวจสอบว่าเป็นไฟล์รูปภาพ\n      if (!file.type.startsWith('image/')) {\n        this.showAlert('กรุณาอัปโหลดไฟล์รูปภาพเท่านั้น', 'error');\n        return;\n      }\n\n      // ตรวจสอบขนาดไฟล์ - เพิ่มขนาดสูงสุดเป็น 50MB\n      const maxSizeInBytes = 50 * 1024 * 1024; // 50MB\n      if (file.size > maxSizeInBytes) {\n        this.showAlert(`ไฟล์มีขนาดใหญ่เกินไป (${(file.size / (1024 * 1024)).toFixed(2)} MB) กรุณาอัปโหลดไฟล์ขนาดไม่เกิน 50MB`, 'error');\n        return;\n      }\n\n      // Show loading state\n      this.isLoading = true;\n\n      // Show loading alert\n      this.showAlert('กำลังอัปโหลดรูปโปรไฟล์...', 'info');\n\n      // Convert file to base64\n      const reader = new FileReader();\n      reader.onload = async e => {\n        try {\n          let imageData = e.target.result;\n\n          // Ensure correct MIME type for all image files\n          if (file.type === 'image/jpeg' || file.type === 'image/jpg') {\n            if (!imageData.startsWith('data:image/jpeg')) {\n              imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/jpeg');\n            }\n          } else if (file.type === 'image/png' && !imageData.startsWith('data:image/png')) {\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/png');\n          } else if (file.type === 'image/gif' && !imageData.startsWith('data:image/gif')) {\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/gif');\n          } else if (file.type === 'image/webp' && !imageData.startsWith('data:image/webp')) {\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/webp');\n          } else if (file.type === 'image/svg+xml' && !imageData.startsWith('data:image/svg+xml')) {\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/svg+xml');\n          } else if (file.type === 'image/bmp' && !imageData.startsWith('data:image/bmp')) {\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/bmp');\n          }\n\n          // ตรวจสอบว่า imageData มีรูปแบบที่ถูกต้อง\n          if (!imageData.includes('base64,')) {\n            console.error('Invalid image data format');\n            this.showAlert('รูปแบบข้อมูลรูปภาพไม่ถูกต้อง กรุณาลองใหม่อีกครั้ง', 'error');\n            this.isLoading = false;\n            return;\n          }\n\n          // Show preview immediately\n          this.profilePictureUrl = imageData;\n\n          // ดึง userId จาก localStorage\n          const userId = localStorage.getItem('userId');\n          if (!userId) {\n            console.error('No user ID found in localStorage');\n            this.showAlert('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง', 'error');\n            this.isLoading = false;\n            return;\n          }\n\n          // บันทึกลงใน localStorage ทันทีเพื่อป้องกันการสูญหายเมื่อรีเฟรชหน้า\n          localStorage.setItem(`profilePictureUrl_${userId}`, imageData);\n          console.log(`Saved profile picture to localStorage for user ID: ${userId}`);\n\n          // บันทึกลงใน sessionStorage เป็นสำรอง\n          sessionStorage.setItem(`lastProfilePicture_${userId}`, imageData);\n          console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\n\n          // บันทึกเวลาที่อัปโหลดล่าสุด\n          const uploadTimestamp = new Date().getTime();\n          localStorage.setItem(`profilePictureTimestamp_${userId}`, uploadTimestamp.toString());\n\n          // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ ทันที\n          window.dispatchEvent(new CustomEvent('profile-updated'));\n\n          // อัปโหลดไปยังเซิร์ฟเวอร์โดยใช้ api.uploadProfilePicture\n          // ซึ่งจะบันทึกรูปภาพลงใน localStorage และ sessionStorage อีกครั้ง\n          // และส่งอีเวนต์ profile-updated เมื่อสำเร็จหรือล้มเหลว\n          try {\n            const response = await api.uploadProfilePicture(imageData);\n            if (response.data && response.data.profilePictureUrl) {\n              this.showAlert('อัปโหลดรูปโปรไฟล์เรียบร้อยแล้ว', 'success');\n            }\n          } catch (error) {\n            console.error('Error uploading profile picture:', error);\n\n            // ยังคงแสดงความสำเร็จเนื่องจากเราได้บันทึกรูปภาพไว้ในเครื่องแล้ว\n            this.showAlert('บันทึกรูปโปรไฟล์เรียบร้อยแล้ว (แบบออฟไลน์)', 'success');\n          } finally {\n            // รีเซ็ตสถานะการโหลดเสมอ\n            this.isLoading = false;\n          }\n        } catch (error) {\n          console.error('Error processing image:', error);\n          this.showAlert('เกิดข้อผิดพลาดในการประมวลผลรูปภาพ กรุณาลองใหม่อีกครั้ง', 'error');\n          this.isLoading = false;\n        }\n      };\n\n      // จัดการข้อผิดพลาดของ reader\n      reader.onerror = () => {\n        console.error('FileReader error');\n        this.showAlert('เกิดข้อผิดพลาดในการอ่านไฟล์ กรุณาลองใหม่อีกครั้ง', 'error');\n        this.isLoading = false;\n      };\n      reader.readAsDataURL(file);\n    },\n    formatStatus(status) {\n      if (!status) return 'ไม่ทราบสถานะ';\n      const statusMap = {\n        'headman': 'ผู้ใหญ่บ้าน',\n        'assistant': 'ผู้ช่วยผู้ใหญ่บ้าน',\n        'villager': 'ลูกบ้าน',\n        'pending': 'ผู้ใช้ที่รอการอนุมัติ'\n      };\n      return statusMap[status.toLowerCase()] || status.charAt(0).toUpperCase() + status.slice(1);\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'ไม่มีข้อมูล';\n      try {\n        // แปลงวันที่เป็นวัตถุ Date\n        const date = new Date(dateString);\n\n        // ตรวจสอบว่าวันที่ถูกต้องหรือไม่\n        if (isNaN(date.getTime())) {\n          return 'วันที่ไม่ถูกต้อง';\n        }\n\n        // กำหนดตัวเลือกการจัดรูปแบบวันที่แบบไทย\n        const options = {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        };\n\n        // แปลงเป็นวันที่ภาษาไทย\n        return date.toLocaleDateString('th-TH', options) + ' น.';\n      } catch (error) {\n        console.error('Error formatting date:', error);\n        return 'วันที่ไม่ถูกต้อง';\n      }\n    },\n    showAlert(message, type = 'success') {\n      this.alert = {\n        show: true,\n        message,\n        type\n      };\n\n      // Hide alert after 3 seconds\n      setTimeout(() => {\n        this.alert.show = false;\n      }, 3000);\n    },\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // If it's a data URL (base64), return as is\n      if (url.startsWith('data:')) {\n        return url;\n      }\n\n      // If it's a relative URL, use it as is (proxy will handle it)\n      if (url.startsWith('/')) {\n        // Add a timestamp to prevent caching\n        const timestamp = new Date().getTime();\n        // Use relative URL for proxy\n        return `${url}?t=${timestamp}`;\n      }\n\n      // If it's an https URL (like randomuser.me), return as is\n      if (url.startsWith('http')) {\n        return url;\n      }\n\n      // Otherwise, return the URL as is\n      return url;\n    },\n    handleImageError(e) {\n      // ป้องกันการวนซ้ำโดยตรวจสอบว่ารูปภาพได้รับการประมวลผลแล้วหรือไม่\n      if (e.target.dataset.errorHandled) {\n        // ถ้าเราได้พยายามจัดการกับข้อผิดพลาดนี้แล้ว ให้ใช้ placeholder\n        this.profilePictureUrl = null;\n        return;\n      }\n\n      // ทำเครื่องหมายว่ารูปภาพนี้กำลังถูกประมวลผลเพื่อป้องกันการวนซ้ำ\n      e.target.dataset.errorHandled = 'true';\n\n      // ดึง userId จาก localStorage\n      const userId = localStorage.getItem('userId');\n\n      // ลำดับการตรวจสอบ:\n      // 1. ตรวจสอบ localStorage ก่อน\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n        console.log(`Using stored base64 image for user ID: ${userId}`);\n        this.profilePictureUrl = storedPictureUrl;\n        return;\n      }\n\n      // 2. ตรวจสอบ sessionStorage\n      const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n      if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\n        console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\n        this.profilePictureUrl = lastProfilePicture;\n        // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\n        return;\n      }\n\n      // 3. ตรวจสอบ URL ของเซิร์ฟเวอร์\n      const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n      if (serverPictureUrl) {\n        // ลองใช้ URL ของเซิร์ฟเวอร์โดยตรง\n        const timestamp = new Date().getTime();\n        const newUrl = `${serverPictureUrl}?t=${timestamp}`;\n        console.log('Trying server URL:', newUrl);\n\n        // ใช้ URL ใหม่โดยตรงกับ profilePictureUrl แทนที่จะกำหนดให้กับ e.target.src\n        // เพื่อหลีกเลี่ยงการเรียก handleImageError ซ้ำ\n        this.profilePictureUrl = newUrl;\n        return;\n      }\n\n      // 4. ลองโหลดรูปภาพโดยตรงจากเซิร์ฟเวอร์เป็นทางเลือกสุดท้าย\n      const url = e.target.src;\n      if (url.includes('/uploads/')) {\n        const imagePath = url.split('?')[0]; // ลบพารามิเตอร์การสอบถาม\n        const newUrl = `${imagePath.substring(imagePath.indexOf('/uploads/'))}`;\n        console.log('Trying alternative URL:', newUrl);\n\n        // ใช้ URL ใหม่โดยตรงกับ profilePictureUrl แทนที่จะกำหนดให้กับ e.target.src\n        this.profilePictureUrl = newUrl;\n        return;\n      }\n\n      // ถ้าทุกอย่างล้มเหลว ให้กลับไปใช้ placeholder\n      this.profilePictureUrl = null;\n    }\n  },\n  mounted() {\n    // ดึง userId จาก localStorage\n    const userId = localStorage.getItem('userId');\n\n    // ตรวจสอบรูปภาพจาก localStorage ก่อน (เพราะเชื่อถือได้มากที่สุด)\n    if (userId) {\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n        console.log(`Mounted: Using stored profile picture for user ID: ${userId}`);\n        this.profilePictureUrl = storedPictureUrl;\n      }\n      // ถ้าไม่มีใน localStorage ให้ตรวจสอบใน sessionStorage\n      else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\n        console.log(`Mounted: Using last profile picture from sessionStorage for user ID: ${userId}`);\n        const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\n        this.profilePictureUrl = lastPicture;\n        // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\n      }\n      // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ตรวจสอบ URL ของเซิร์ฟเวอร์\n      else {\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\n        if (serverPictureUrl) {\n          const timestamp = new Date().getTime();\n          this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\n        }\n      }\n    }\n\n    // ดึงข้อมูลโปรไฟล์จาก API\n    this.fetchUserProfile();\n\n    // ตั้งค่าตัวจับเวลาเพื่อตรวจสอบการเปลี่ยนแปลงของรูปภาพโปรไฟล์\n    this.profileUpdateHandler = () => {\n      // ดึง userId จาก localStorage\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        // ตรวจสอบรูปภาพจาก localStorage\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\n          this.profilePictureUrl = storedPictureUrl;\n        }\n      }\n    };\n    window.addEventListener('profile-updated', this.profileUpdateHandler);\n  },\n  beforeUnmount() {\n    // ทำความสะอาดตัวจับเวลาและตัวฟังก์ชันเมื่อคอมโพเนนต์ถูกทำลาย\n    if (this.profileUpdateHandler) {\n      window.removeEventListener('profile-updated', this.profileUpdateHandler);\n    }\n  }\n};","map":{"version":3,"names":["api","axios","name","data","userProfile","firstName","lastName","email","phone","address","status","approvedBy","updatedAt","profilePictureUrl","isLoading","errors","alert","show","message","type","computed","userInitial","charAt","toUpperCase","methods","fetchUserProfile","console","log","userId","localStorage","getItem","storedPictureUrl","startsWith","sessionStorage","lastPicture","setItem","serverPictureUrl","timestamp","Date","getTime","response","getUserProfile","userData","user","error","showAlert","first_name","last_name","user_email","approved_by","updated_at","user_id","profile_picture","serverUrl","validateForm","isValid","trim","saveProfile","updateUserProfile","triggerPhotoUpload","$refs","photoInput","click","handleFileSelected","event","file","target","files","maxSizeInBytes","size","toFixed","reader","FileReader","onload","e","imageData","result","replace","includes","uploadTimestamp","toString","window","dispatchEvent","CustomEvent","uploadProfilePicture","onerror","readAsDataURL","formatStatus","statusMap","toLowerCase","slice","formatDate","dateString","date","isNaN","options","year","month","day","hour","minute","toLocaleDateString","setTimeout","getFullImageUrl","url","handleImageError","dataset","errorHandled","lastProfilePicture","newUrl","src","imagePath","split","substring","indexOf","mounted","profileUpdateHandler","addEventListener","beforeUnmount","removeEventListener"],"sources":["C:\\Users\\HP\\Documents\\mooban4\\frontend\\src\\views\\ProfileViewSimple.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\">\r\n    <h1>โปรไฟล์ของฉัน</h1>\r\n    \r\n    <div class=\"profile-card\">\r\n      <div class=\"profile-header\">\r\n        <div class=\"profile-photo\">\r\n          <div v-if=\"profilePictureUrl\" class=\"photo-container\">\r\n            <img :src=\"getFullImageUrl(profilePictureUrl)\" alt=\"Profile Photo\" @error=\"handleImageError\">\r\n          </div>\r\n          <div v-else class=\"photo-placeholder\">\r\n            {{ userInitial }}\r\n          </div>\r\n          <input\r\n            type=\"file\"\r\n            ref=\"photoInput\"\r\n            style=\"display: none;\"\r\n            accept=\"image/*\"\r\n            @change=\"handleFileSelected\"\r\n          >\r\n          <button @click=\"triggerPhotoUpload\" class=\"upload-btn\">อัปโหลดรูปภาพ</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- แสดงการรออนุมัติ (Pending Approvals) -->\r\n      <div v-if=\"userProfile.status === 'pending'\" class=\"pending-approval-banner\">\r\n        <div class=\"pending-icon\">⏳</div>\r\n        <div class=\"pending-message\">\r\n          <h3>ผู้ใช้ที่รอการอนุมัติ</h3>\r\n          <p>บัญชีของคุณกำลังรอการตรวจสอบและอนุมัติจากผู้ดูแลระบบ</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"profile-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"firstName\">ชื่อ</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"firstName\" \r\n            v-model=\"userProfile.firstName\" \r\n            :class=\"{ 'error': errors.firstName }\"\r\n          >\r\n          <span v-if=\"errors.firstName\" class=\"error-text\">{{ errors.firstName }}</span>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"lastName\">นามสกุล</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"lastName\" \r\n            v-model=\"userProfile.lastName\" \r\n            :class=\"{ 'error': errors.lastName }\"\r\n          >\r\n          <span v-if=\"errors.lastName\" class=\"error-text\">{{ errors.lastName }}</span>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"email\">อีเมล</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            v-model=\"userProfile.email\" \r\n            disabled\r\n          >\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"phone\">เบอร์โทรศัพท์</label>\r\n          <input \r\n            type=\"tel\" \r\n            id=\"phone\" \r\n            v-model=\"userProfile.phone\"\r\n          >\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"address\">ที่อยู่</label>\r\n          <textarea \r\n            id=\"address\" \r\n            v-model=\"userProfile.address\"\r\n          ></textarea>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"status\">สถานะ</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"status\"\r\n            :value=\"formatStatus(userProfile.status)\"\r\n            disabled\r\n          >\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"approvedBy\">อนุมัติโดย</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"approvedBy\"\r\n            :value=\"userProfile.approvedBy || 'ไม่มีข้อมูล'\"\r\n            disabled\r\n          >\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"updatedAt\">อัปเดตล่าสุดเมื่อ</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"updatedAt\"\r\n            :value=\"formatDate(userProfile.updatedAt)\"\r\n            disabled\r\n          >\r\n        </div>\r\n        \r\n        <div class=\"form-actions\">\r\n          <button \r\n            @click=\"saveProfile\" \r\n            class=\"save-btn\" \r\n            :disabled=\"isLoading\"\r\n          >\r\n            {{ isLoading ? 'กำลังบันทึก...' : 'บันทึก' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"alert.show\" class=\"alert\" :class=\"'alert-' + alert.type\">\r\n      {{ alert.message }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/services/api';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ProfileViewSimple',\r\n  data() {\r\n    return {\r\n      userProfile: {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phone: '',\r\n        address: '',\r\n        status: '',\r\n        approvedBy: '',\r\n        updatedAt: null\r\n      },\r\n      profilePictureUrl: null,\r\n      isLoading: false,\r\n      errors: {\r\n        firstName: '',\r\n        lastName: ''\r\n      },\r\n      alert: {\r\n        show: false,\r\n        message: '',\r\n        type: 'success'\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    userInitial() {\r\n      return this.userProfile.email ? this.userProfile.email.charAt(0).toUpperCase() : '?';\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchUserProfile() {\r\n      try {\r\n        this.isLoading = true;\r\n        console.log('Fetching user profile...');\r\n\r\n        // ดึง userId จาก localStorage\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        // ตรวจสอบรูปภาพจาก localStorage ก่อน (เพราะเชื่อถือได้มากที่สุด)\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          console.log(`Using stored profile picture for user ID: ${userId}`);\r\n          this.profilePictureUrl = storedPictureUrl;\r\n        }\r\n        // ถ้าไม่มีใน localStorage ให้ตรวจสอบใน sessionStorage\r\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n          console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\r\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n          this.profilePictureUrl = lastPicture;\r\n          // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n        }\r\n        // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ตรวจสอบ URL ของเซิร์ฟเวอร์\r\n        else {\r\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n          if (serverPictureUrl) {\r\n            const timestamp = new Date().getTime();\r\n            this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\r\n          }\r\n        }\r\n\r\n        // ดึงข้อมูลโปรไฟล์จาก API\r\n        const response = await api.getUserProfile();\r\n        console.log('User profile response:', response.data);\r\n\r\n        const userData = response.data.user;\r\n        if (!userData) {\r\n          console.error('No user data found in response:', response.data);\r\n          this.showAlert('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง', 'error');\r\n          return;\r\n        }\r\n\r\n        // แสดงข้อมูลทั้งหมดที่ได้รับจาก API เพื่อตรวจสอบ\r\n        console.log('All user data fields:', userData);\r\n\r\n        // ดึงข้อมูลจาก localStorage ถ้าไม่มีข้อมูลจาก API\r\n        this.userProfile = {\r\n          firstName: userData.first_name || localStorage.getItem('userFirstName') || '',\r\n          lastName: userData.last_name || localStorage.getItem('userLastName') || '',\r\n          email: userData.user_email || localStorage.getItem('email') || '',\r\n          phone: userData.phone || localStorage.getItem('userPhone') || '',\r\n          address: userData.address || localStorage.getItem('userAddress') || '',\r\n          status: userData.status || localStorage.getItem('userStatus') || '',\r\n          approvedBy: userData.approved_by || userData.approvedBy || localStorage.getItem('userApprovedBy') || '',\r\n          updatedAt: userData.updated_at || userData.updatedAt || localStorage.getItem('userUpdatedAt') || null\r\n        };\r\n\r\n        // บันทึกข้อมูลลง localStorage เพื่อใช้ในกรณีที่ API ไม่ทำงาน\r\n        localStorage.setItem('userFirstName', this.userProfile.firstName);\r\n        localStorage.setItem('userLastName', this.userProfile.lastName);\r\n        localStorage.setItem('userPhone', this.userProfile.phone);\r\n        localStorage.setItem('userAddress', this.userProfile.address);\r\n        localStorage.setItem('userId', userData.user_id || userId);\r\n        localStorage.setItem('userApprovedBy', this.userProfile.approvedBy || '');\r\n        localStorage.setItem('userUpdatedAt', this.userProfile.updatedAt || '');\r\n\r\n        // ถ้ายังไม่มีรูปภาพและ API มีรูปภาพ\r\n        if (!this.profilePictureUrl && userData.profile_picture) {\r\n          // For external URLs (like randomuser.me), use directly\r\n          if (userData.profile_picture.startsWith('http')) {\r\n            this.profilePictureUrl = userData.profile_picture;\r\n          } else {\r\n            // For server URLs, add timestamp and use relative path\r\n            const timestamp = new Date().getTime();\r\n            // ใช้ URL แบบสัมพัทธ์เพื่อให้ทำงานได้กับ proxy ของ Vue\r\n            const serverUrl = `${userData.profile_picture}?t=${timestamp}`;\r\n            this.profilePictureUrl = serverUrl;\r\n\r\n            // บันทึก URL ของเซิร์ฟเวอร์ลงใน localStorage\r\n            localStorage.setItem(`serverProfilePictureUrl_${userId}`, userData.profile_picture);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n\r\n        // แม้ว่า API จะล้มเหลว ให้พยายามใช้รูปภาพที่เก็บไว้\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        // ตรวจสอบ localStorage ก่อน\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          console.log(`Using profile picture from localStorage after API error for user ID: ${userId}`);\r\n          this.profilePictureUrl = storedPictureUrl;\r\n        }\r\n        // จากนั้นตรวจสอบ sessionStorage\r\n        else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n          console.log(`Using last profile picture from sessionStorage after API error for user ID: ${userId}`);\r\n          const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n          this.profilePictureUrl = lastPicture;\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n        }\r\n        // ถ้าไม่มีรูปภาพใน localStorage หรือ sessionStorage ให้ใช้รูปภาพจาก serverProfilePictureUrl\r\n        else {\r\n          const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n          if (serverPictureUrl) {\r\n            const timestamp = new Date().getTime();\r\n            this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\r\n          }\r\n        }\r\n\r\n        this.showAlert('ไม่สามารถโหลดข้อมูลโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง', 'error');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    validateForm() {\r\n      let isValid = true;\r\n      this.errors.firstName = '';\r\n      this.errors.lastName = '';\r\n      \r\n      if (!this.userProfile.firstName.trim()) {\r\n        this.errors.firstName = 'กรุณากรอกชื่อ';\r\n        isValid = false;\r\n      }\r\n      \r\n      if (!this.userProfile.lastName.trim()) {\r\n        this.errors.lastName = 'กรุณากรอกนามสกุล';\r\n        isValid = false;\r\n      }\r\n      \r\n      return isValid;\r\n    },\r\n    \r\n    async saveProfile() {\r\n      if (!this.validateForm()) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        this.isLoading = true;\r\n        console.log('Saving profile data:', this.userProfile);\r\n\r\n        const response = await api.updateUserProfile({\r\n          firstName: this.userProfile.firstName,\r\n          lastName: this.userProfile.lastName,\r\n          phone: this.userProfile.phone,\r\n          address: this.userProfile.address\r\n        });\r\n\r\n        console.log('Profile updated:', response.data);\r\n\r\n        // บันทึกข้อมูลลง localStorage เพื่อใช้ในกรณีที่ API ไม่ทำงาน\r\n        localStorage.setItem('userFirstName', this.userProfile.firstName);\r\n        localStorage.setItem('userLastName', this.userProfile.lastName);\r\n        localStorage.setItem('userPhone', this.userProfile.phone);\r\n        localStorage.setItem('userAddress', this.userProfile.address);\r\n\r\n        this.showAlert('อัปเดตโปรไฟล์เรียบร้อยแล้ว', 'success');\r\n\r\n        // โหลดข้อมูลใหม่เพื่อให้แน่ใจว่าข้อมูลถูกต้อง\r\n        await this.fetchUserProfile();\r\n      } catch (error) {\r\n        console.error('Error updating profile:', error);\r\n        this.showAlert('ไม่สามารถอัปเดตโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง', 'error');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    triggerPhotoUpload() {\r\n      // Trigger the file input click\r\n      this.$refs.photoInput.click();\r\n    },\r\n\r\n    async handleFileSelected(event) {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      // Validate file is an image - ตรวจสอบว่าเป็นไฟล์รูปภาพ\r\n      if (!file.type.startsWith('image/')) {\r\n        this.showAlert('กรุณาอัปโหลดไฟล์รูปภาพเท่านั้น', 'error');\r\n        return;\r\n      }\r\n\r\n      // ตรวจสอบขนาดไฟล์ - เพิ่มขนาดสูงสุดเป็น 50MB\r\n      const maxSizeInBytes = 50 * 1024 * 1024; // 50MB\r\n      if (file.size > maxSizeInBytes) {\r\n        this.showAlert(`ไฟล์มีขนาดใหญ่เกินไป (${(file.size / (1024 * 1024)).toFixed(2)} MB) กรุณาอัปโหลดไฟล์ขนาดไม่เกิน 50MB`, 'error');\r\n        return;\r\n      }\r\n\r\n      // Show loading state\r\n      this.isLoading = true;\r\n\r\n      // Show loading alert\r\n      this.showAlert('กำลังอัปโหลดรูปโปรไฟล์...', 'info');\r\n\r\n      // Convert file to base64\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          let imageData = e.target.result;\r\n\r\n          // Ensure correct MIME type for all image files\r\n          if (file.type === 'image/jpeg' || file.type === 'image/jpg') {\r\n            if (!imageData.startsWith('data:image/jpeg')) {\r\n              imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/jpeg');\r\n            }\r\n          } else if (file.type === 'image/png' && !imageData.startsWith('data:image/png')) {\r\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/png');\r\n          } else if (file.type === 'image/gif' && !imageData.startsWith('data:image/gif')) {\r\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/gif');\r\n          } else if (file.type === 'image/webp' && !imageData.startsWith('data:image/webp')) {\r\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/webp');\r\n          } else if (file.type === 'image/svg+xml' && !imageData.startsWith('data:image/svg+xml')) {\r\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/svg+xml');\r\n          } else if (file.type === 'image/bmp' && !imageData.startsWith('data:image/bmp')) {\r\n            imageData = imageData.replace(/^data:image\\/[^;]+/, 'data:image/bmp');\r\n          }\r\n\r\n          // ตรวจสอบว่า imageData มีรูปแบบที่ถูกต้อง\r\n          if (!imageData.includes('base64,')) {\r\n            console.error('Invalid image data format');\r\n            this.showAlert('รูปแบบข้อมูลรูปภาพไม่ถูกต้อง กรุณาลองใหม่อีกครั้ง', 'error');\r\n            this.isLoading = false;\r\n            return;\r\n          }\r\n\r\n          // Show preview immediately\r\n          this.profilePictureUrl = imageData;\r\n\r\n          // ดึง userId จาก localStorage\r\n          const userId = localStorage.getItem('userId');\r\n          if (!userId) {\r\n            console.error('No user ID found in localStorage');\r\n            this.showAlert('ไม่พบข้อมูลผู้ใช้ กรุณาเข้าสู่ระบบใหม่อีกครั้ง', 'error');\r\n            this.isLoading = false;\r\n            return;\r\n          }\r\n\r\n          // บันทึกลงใน localStorage ทันทีเพื่อป้องกันการสูญหายเมื่อรีเฟรชหน้า\r\n          localStorage.setItem(`profilePictureUrl_${userId}`, imageData);\r\n          console.log(`Saved profile picture to localStorage for user ID: ${userId}`);\r\n\r\n          // บันทึกลงใน sessionStorage เป็นสำรอง\r\n          sessionStorage.setItem(`lastProfilePicture_${userId}`, imageData);\r\n          console.log(`Saved profile picture to sessionStorage for user ID: ${userId}`);\r\n\r\n          // บันทึกเวลาที่อัปโหลดล่าสุด\r\n          const uploadTimestamp = new Date().getTime();\r\n          localStorage.setItem(`profilePictureTimestamp_${userId}`, uploadTimestamp.toString());\r\n\r\n          // ส่งอีเวนต์เพื่ออัปเดตรูปภาพโปรไฟล์ในคอมโพเนนต์อื่น ๆ ทันที\r\n          window.dispatchEvent(new CustomEvent('profile-updated'));\r\n\r\n          // อัปโหลดไปยังเซิร์ฟเวอร์โดยใช้ api.uploadProfilePicture\r\n          // ซึ่งจะบันทึกรูปภาพลงใน localStorage และ sessionStorage อีกครั้ง\r\n          // และส่งอีเวนต์ profile-updated เมื่อสำเร็จหรือล้มเหลว\r\n          try {\r\n            const response = await api.uploadProfilePicture(imageData);\r\n\r\n            if (response.data && response.data.profilePictureUrl) {\r\n              this.showAlert('อัปโหลดรูปโปรไฟล์เรียบร้อยแล้ว', 'success');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error uploading profile picture:', error);\r\n\r\n            // ยังคงแสดงความสำเร็จเนื่องจากเราได้บันทึกรูปภาพไว้ในเครื่องแล้ว\r\n            this.showAlert('บันทึกรูปโปรไฟล์เรียบร้อยแล้ว (แบบออฟไลน์)', 'success');\r\n          } finally {\r\n            // รีเซ็ตสถานะการโหลดเสมอ\r\n            this.isLoading = false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing image:', error);\r\n          this.showAlert('เกิดข้อผิดพลาดในการประมวลผลรูปภาพ กรุณาลองใหม่อีกครั้ง', 'error');\r\n          this.isLoading = false;\r\n        }\r\n      };\r\n\r\n      // จัดการข้อผิดพลาดของ reader\r\n      reader.onerror = () => {\r\n        console.error('FileReader error');\r\n        this.showAlert('เกิดข้อผิดพลาดในการอ่านไฟล์ กรุณาลองใหม่อีกครั้ง', 'error');\r\n        this.isLoading = false;\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    },\r\n    \r\n    formatStatus(status) {\r\n      if (!status) return 'ไม่ทราบสถานะ';\r\n\r\n      const statusMap = {\r\n        'headman': 'ผู้ใหญ่บ้าน',\r\n        'assistant': 'ผู้ช่วยผู้ใหญ่บ้าน',\r\n        'villager': 'ลูกบ้าน',\r\n        'pending': 'ผู้ใช้ที่รอการอนุมัติ'\r\n      };\r\n\r\n      return statusMap[status.toLowerCase()] || status.charAt(0).toUpperCase() + status.slice(1);\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'ไม่มีข้อมูล';\r\n\r\n      try {\r\n        // แปลงวันที่เป็นวัตถุ Date\r\n        const date = new Date(dateString);\r\n\r\n        // ตรวจสอบว่าวันที่ถูกต้องหรือไม่\r\n        if (isNaN(date.getTime())) {\r\n          return 'วันที่ไม่ถูกต้อง';\r\n        }\r\n\r\n        // กำหนดตัวเลือกการจัดรูปแบบวันที่แบบไทย\r\n        const options = {\r\n          year: 'numeric',\r\n          month: 'long',\r\n          day: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        };\r\n\r\n        // แปลงเป็นวันที่ภาษาไทย\r\n        return date.toLocaleDateString('th-TH', options) + ' น.';\r\n      } catch (error) {\r\n        console.error('Error formatting date:', error);\r\n        return 'วันที่ไม่ถูกต้อง';\r\n      }\r\n    },\r\n    \r\n    showAlert(message, type = 'success') {\r\n      this.alert = {\r\n        show: true,\r\n        message,\r\n        type\r\n      };\r\n\r\n      // Hide alert after 3 seconds\r\n      setTimeout(() => {\r\n        this.alert.show = false;\r\n      }, 3000);\r\n    },\r\n\r\n    getFullImageUrl(url) {\r\n      if (!url) return '';\r\n\r\n      // If it's a data URL (base64), return as is\r\n      if (url.startsWith('data:')) {\r\n        return url;\r\n      }\r\n\r\n      // If it's a relative URL, use it as is (proxy will handle it)\r\n      if (url.startsWith('/')) {\r\n        // Add a timestamp to prevent caching\r\n        const timestamp = new Date().getTime();\r\n        // Use relative URL for proxy\r\n        return `${url}?t=${timestamp}`;\r\n      }\r\n\r\n      // If it's an https URL (like randomuser.me), return as is\r\n      if (url.startsWith('http')) {\r\n        return url;\r\n      }\r\n\r\n      // Otherwise, return the URL as is\r\n      return url;\r\n    },\r\n\r\n    handleImageError(e) {\r\n      // ป้องกันการวนซ้ำโดยตรวจสอบว่ารูปภาพได้รับการประมวลผลแล้วหรือไม่\r\n      if (e.target.dataset.errorHandled) {\r\n        // ถ้าเราได้พยายามจัดการกับข้อผิดพลาดนี้แล้ว ให้ใช้ placeholder\r\n        this.profilePictureUrl = null;\r\n        return;\r\n      }\r\n\r\n      // ทำเครื่องหมายว่ารูปภาพนี้กำลังถูกประมวลผลเพื่อป้องกันการวนซ้ำ\r\n      e.target.dataset.errorHandled = 'true';\r\n\r\n      // ดึง userId จาก localStorage\r\n      const userId = localStorage.getItem('userId');\r\n\r\n      // ลำดับการตรวจสอบ:\r\n      // 1. ตรวจสอบ localStorage ก่อน\r\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n        console.log(`Using stored base64 image for user ID: ${userId}`);\r\n        this.profilePictureUrl = storedPictureUrl;\r\n        return;\r\n      }\r\n\r\n      // 2. ตรวจสอบ sessionStorage\r\n      const lastProfilePicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n      if (lastProfilePicture && lastProfilePicture.startsWith('data:image/')) {\r\n        console.log(`Using last profile picture from sessionStorage for user ID: ${userId}`);\r\n        this.profilePictureUrl = lastProfilePicture;\r\n        // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\r\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastProfilePicture);\r\n        return;\r\n      }\r\n\r\n      // 3. ตรวจสอบ URL ของเซิร์ฟเวอร์\r\n      const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n      if (serverPictureUrl) {\r\n        // ลองใช้ URL ของเซิร์ฟเวอร์โดยตรง\r\n        const timestamp = new Date().getTime();\r\n        const newUrl = `${serverPictureUrl}?t=${timestamp}`;\r\n        console.log('Trying server URL:', newUrl);\r\n\r\n        // ใช้ URL ใหม่โดยตรงกับ profilePictureUrl แทนที่จะกำหนดให้กับ e.target.src\r\n        // เพื่อหลีกเลี่ยงการเรียก handleImageError ซ้ำ\r\n        this.profilePictureUrl = newUrl;\r\n        return;\r\n      }\r\n\r\n      // 4. ลองโหลดรูปภาพโดยตรงจากเซิร์ฟเวอร์เป็นทางเลือกสุดท้าย\r\n      const url = e.target.src;\r\n      if (url.includes('/uploads/')) {\r\n        const imagePath = url.split('?')[0]; // ลบพารามิเตอร์การสอบถาม\r\n        const newUrl = `${imagePath.substring(imagePath.indexOf('/uploads/'))}`;\r\n        console.log('Trying alternative URL:', newUrl);\r\n\r\n        // ใช้ URL ใหม่โดยตรงกับ profilePictureUrl แทนที่จะกำหนดให้กับ e.target.src\r\n        this.profilePictureUrl = newUrl;\r\n        return;\r\n      }\r\n\r\n      // ถ้าทุกอย่างล้มเหลว ให้กลับไปใช้ placeholder\r\n      this.profilePictureUrl = null;\r\n    }\r\n  },\r\n  mounted() {\r\n    // ดึง userId จาก localStorage\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    // ตรวจสอบรูปภาพจาก localStorage ก่อน (เพราะเชื่อถือได้มากที่สุด)\r\n    if (userId) {\r\n      const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n      if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n        console.log(`Mounted: Using stored profile picture for user ID: ${userId}`);\r\n        this.profilePictureUrl = storedPictureUrl;\r\n      }\r\n      // ถ้าไม่มีใน localStorage ให้ตรวจสอบใน sessionStorage\r\n      else if (sessionStorage.getItem(`lastProfilePicture_${userId}`)) {\r\n        console.log(`Mounted: Using last profile picture from sessionStorage for user ID: ${userId}`);\r\n        const lastPicture = sessionStorage.getItem(`lastProfilePicture_${userId}`);\r\n        this.profilePictureUrl = lastPicture;\r\n        // บันทึกกลับไปที่ localStorage เพื่อใช้ในอนาคต\r\n        localStorage.setItem(`profilePictureUrl_${userId}`, lastPicture);\r\n      }\r\n      // ถ้าไม่มีทั้งใน localStorage และ sessionStorage ให้ตรวจสอบ URL ของเซิร์ฟเวอร์\r\n      else {\r\n        const serverPictureUrl = localStorage.getItem(`serverProfilePictureUrl_${userId}`);\r\n        if (serverPictureUrl) {\r\n          const timestamp = new Date().getTime();\r\n          this.profilePictureUrl = `${serverPictureUrl}?t=${timestamp}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    // ดึงข้อมูลโปรไฟล์จาก API\r\n    this.fetchUserProfile();\r\n\r\n    // ตั้งค่าตัวจับเวลาเพื่อตรวจสอบการเปลี่ยนแปลงของรูปภาพโปรไฟล์\r\n    this.profileUpdateHandler = () => {\r\n      // ดึง userId จาก localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        // ตรวจสอบรูปภาพจาก localStorage\r\n        const storedPictureUrl = localStorage.getItem(`profilePictureUrl_${userId}`);\r\n        if (storedPictureUrl && storedPictureUrl.startsWith('data:image/')) {\r\n          this.profilePictureUrl = storedPictureUrl;\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('profile-updated', this.profileUpdateHandler);\r\n  },\r\n\r\n  beforeUnmount() {\r\n    // ทำความสะอาดตัวจับเวลาและตัวฟังก์ชันเมื่อคอมโพเนนต์ถูกทำลาย\r\n    if (this.profileUpdateHandler) {\r\n      window.removeEventListener('profile-updated', this.profileUpdateHandler);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.profile-card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.profile-header {\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: #f5f5f5;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.profile-photo {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.photo-container {\r\n  width: 256px;\r\n  height: 256px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-bottom: 15px;\r\n  border: 3px solid white;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.photo-container img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.photo-placeholder {\r\n  width: 256px;\r\n  height: 256px;\r\n  border-radius: 50%;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 72px; /* เพิ่มขนาดตัวอักษรให้เหมาะสมกับขนาดที่ใหญ่ขึ้น */\r\n  font-weight: bold;\r\n  color: #757575;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.upload-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.upload-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.profile-form {\r\n  padding: 20px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\ninput, textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n}\r\n\r\ninput.error {\r\n  border-color: #d32f2f;\r\n}\r\n\r\n.error-text {\r\n  color: #d32f2f;\r\n  font-size: 14px;\r\n  margin-top: 5px;\r\n  display: block;\r\n}\r\n\r\ntextarea {\r\n  min-height: 100px;\r\n  resize: vertical;\r\n}\r\n\r\ninput:disabled, textarea:disabled {\r\n  background-color: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.save-btn {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.save-btn:hover {\r\n  background-color: #1976D2;\r\n}\r\n\r\n.save-btn:disabled {\r\n  background-color: #9e9e9e;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.alert {\r\n  padding: 15px;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n  animation: fadeIn 0.3s;\r\n}\r\n\r\n.alert-success {\r\n  background-color: #dff0d8;\r\n  color: #3c763d;\r\n  border: 1px solid #d6e9c6;\r\n}\r\n\r\n.alert-error {\r\n  background-color: #f2dede;\r\n  color: #a94442;\r\n  border: 1px solid #ebccd1;\r\n}\r\n\r\n.alert-info {\r\n  background-color: #d9edf7;\r\n  color: #31708f;\r\n  border: 1px solid #bce8f1;\r\n}\r\n\r\n.pending-approval-banner {\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #fff3cd;\r\n  border: 1px solid #ffeeba;\r\n  border-radius: 4px;\r\n  padding: 15px;\r\n  margin: 0 20px 20px;\r\n}\r\n\r\n.pending-icon {\r\n  font-size: 24px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.pending-message {\r\n  flex: 1;\r\n}\r\n\r\n.pending-message h3 {\r\n  margin: 0 0 5px 0;\r\n  color: #856404;\r\n}\r\n\r\n.pending-message p {\r\n  margin: 0;\r\n  color: #856404;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n</style>"],"mappings":"AAoIA,OAAOA,GAAE,MAAO,gBAAgB;AAChC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;QACXC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,MAAM,EAAE,EAAE;QACVC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE;MACb,CAAC;MACDC,iBAAiB,EAAE,IAAI;MACvBC,SAAS,EAAE,KAAK;MAChBC,MAAM,EAAE;QACNV,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE;MACZ,CAAC;MACDU,KAAK,EAAE;QACLC,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACjB,WAAW,CAACG,KAAI,GAAI,IAAI,CAACH,WAAW,CAACG,KAAK,CAACe,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAI,GAAG;IACtF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,IAAI,CAACX,SAAQ,GAAI,IAAI;QACrBY,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;QAEvC;QACA,MAAMC,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;QAE7C;QACA,MAAMC,gBAAe,GAAIF,YAAY,CAACC,OAAO,CAAC,qBAAqBF,MAAM,EAAE,CAAC;QAC5E,IAAIG,gBAAe,IAAKA,gBAAgB,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;UAClEN,OAAO,CAACC,GAAG,CAAC,6CAA6CC,MAAM,EAAE,CAAC;UAClE,IAAI,CAACf,iBAAgB,GAAIkB,gBAAgB;QAC3C;QACA;QAAA,KACK,IAAIE,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC,EAAE;UAC/DF,OAAO,CAACC,GAAG,CAAC,+DAA+DC,MAAM,EAAE,CAAC;UACpF,MAAMM,WAAU,GAAID,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC;UAC1E,IAAI,CAACf,iBAAgB,GAAIqB,WAAW;UACpC;UACAL,YAAY,CAACM,OAAO,CAAC,qBAAqBP,MAAM,EAAE,EAAEM,WAAW,CAAC;QAClE;QACA;QAAA,KACK;UACH,MAAME,gBAAe,GAAIP,YAAY,CAACC,OAAO,CAAC,2BAA2BF,MAAM,EAAE,CAAC;UAClF,IAAIQ,gBAAgB,EAAE;YACpB,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;YACtC,IAAI,CAAC1B,iBAAgB,GAAI,GAAGuB,gBAAgB,MAAMC,SAAS,EAAE;UAC/D;QACF;;QAEA;QACA,MAAMG,QAAO,GAAI,MAAMxC,GAAG,CAACyC,cAAc,CAAC,CAAC;QAC3Cf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEa,QAAQ,CAACrC,IAAI,CAAC;QAEpD,MAAMuC,QAAO,GAAIF,QAAQ,CAACrC,IAAI,CAACwC,IAAI;QACnC,IAAI,CAACD,QAAQ,EAAE;UACbhB,OAAO,CAACkB,KAAK,CAAC,iCAAiC,EAAEJ,QAAQ,CAACrC,IAAI,CAAC;UAC/D,IAAI,CAAC0C,SAAS,CAAC,gDAAgD,EAAE,OAAO,CAAC;UACzE;QACF;;QAEA;QACAnB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEe,QAAQ,CAAC;;QAE9C;QACA,IAAI,CAACtC,WAAU,GAAI;UACjBC,SAAS,EAAEqC,QAAQ,CAACI,UAAS,IAAKjB,YAAY,CAACC,OAAO,CAAC,eAAe,KAAK,EAAE;UAC7ExB,QAAQ,EAAEoC,QAAQ,CAACK,SAAQ,IAAKlB,YAAY,CAACC,OAAO,CAAC,cAAc,KAAK,EAAE;UAC1EvB,KAAK,EAAEmC,QAAQ,CAACM,UAAS,IAAKnB,YAAY,CAACC,OAAO,CAAC,OAAO,KAAK,EAAE;UACjEtB,KAAK,EAAEkC,QAAQ,CAAClC,KAAI,IAAKqB,YAAY,CAACC,OAAO,CAAC,WAAW,KAAK,EAAE;UAChErB,OAAO,EAAEiC,QAAQ,CAACjC,OAAM,IAAKoB,YAAY,CAACC,OAAO,CAAC,aAAa,KAAK,EAAE;UACtEpB,MAAM,EAAEgC,QAAQ,CAAChC,MAAK,IAAKmB,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;UACnEnB,UAAU,EAAE+B,QAAQ,CAACO,WAAU,IAAKP,QAAQ,CAAC/B,UAAS,IAAKkB,YAAY,CAACC,OAAO,CAAC,gBAAgB,KAAK,EAAE;UACvGlB,SAAS,EAAE8B,QAAQ,CAACQ,UAAS,IAAKR,QAAQ,CAAC9B,SAAQ,IAAKiB,YAAY,CAACC,OAAO,CAAC,eAAe,KAAK;QACnG,CAAC;;QAED;QACAD,YAAY,CAACM,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC/B,WAAW,CAACC,SAAS,CAAC;QACjEwB,YAAY,CAACM,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC/B,WAAW,CAACE,QAAQ,CAAC;QAC/DuB,YAAY,CAACM,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC/B,WAAW,CAACI,KAAK,CAAC;QACzDqB,YAAY,CAACM,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC/B,WAAW,CAACK,OAAO,CAAC;QAC7DoB,YAAY,CAACM,OAAO,CAAC,QAAQ,EAAEO,QAAQ,CAACS,OAAM,IAAKvB,MAAM,CAAC;QAC1DC,YAAY,CAACM,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC/B,WAAW,CAACO,UAAS,IAAK,EAAE,CAAC;QACzEkB,YAAY,CAACM,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC/B,WAAW,CAACQ,SAAQ,IAAK,EAAE,CAAC;;QAEvE;QACA,IAAI,CAAC,IAAI,CAACC,iBAAgB,IAAK6B,QAAQ,CAACU,eAAe,EAAE;UACvD;UACA,IAAIV,QAAQ,CAACU,eAAe,CAACpB,UAAU,CAAC,MAAM,CAAC,EAAE;YAC/C,IAAI,CAACnB,iBAAgB,GAAI6B,QAAQ,CAACU,eAAe;UACnD,OAAO;YACL;YACA,MAAMf,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;YACtC;YACA,MAAMc,SAAQ,GAAI,GAAGX,QAAQ,CAACU,eAAe,MAAMf,SAAS,EAAE;YAC9D,IAAI,CAACxB,iBAAgB,GAAIwC,SAAS;;YAElC;YACAxB,YAAY,CAACM,OAAO,CAAC,2BAA2BP,MAAM,EAAE,EAAEc,QAAQ,CAACU,eAAe,CAAC;UACrF;QACF;MACF,EAAE,OAAOR,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;;QAEpD;QACA,MAAMhB,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;QAE7C;QACA,MAAMC,gBAAe,GAAIF,YAAY,CAACC,OAAO,CAAC,qBAAqBF,MAAM,EAAE,CAAC;QAC5E,IAAIG,gBAAe,IAAKA,gBAAgB,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;UAClEN,OAAO,CAACC,GAAG,CAAC,wEAAwEC,MAAM,EAAE,CAAC;UAC7F,IAAI,CAACf,iBAAgB,GAAIkB,gBAAgB;QAC3C;QACA;QAAA,KACK,IAAIE,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC,EAAE;UAC/DF,OAAO,CAACC,GAAG,CAAC,+EAA+EC,MAAM,EAAE,CAAC;UACpG,MAAMM,WAAU,GAAID,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC;UAC1E,IAAI,CAACf,iBAAgB,GAAIqB,WAAW;UACpCL,YAAY,CAACM,OAAO,CAAC,qBAAqBP,MAAM,EAAE,EAAEM,WAAW,CAAC;QAClE;QACA;QAAA,KACK;UACH,MAAME,gBAAe,GAAIP,YAAY,CAACC,OAAO,CAAC,2BAA2BF,MAAM,EAAE,CAAC;UAClF,IAAIQ,gBAAgB,EAAE;YACpB,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;YACtC,IAAI,CAAC1B,iBAAgB,GAAI,GAAGuB,gBAAgB,MAAMC,SAAS,EAAE;UAC/D;QACF;QAEA,IAAI,CAACQ,SAAS,CAAC,oDAAoD,EAAE,OAAO,CAAC;MAC/E,UAAU;QACR,IAAI,CAAC/B,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IAEDwC,YAAYA,CAAA,EAAG;MACb,IAAIC,OAAM,GAAI,IAAI;MAClB,IAAI,CAACxC,MAAM,CAACV,SAAQ,GAAI,EAAE;MAC1B,IAAI,CAACU,MAAM,CAACT,QAAO,GAAI,EAAE;MAEzB,IAAI,CAAC,IAAI,CAACF,WAAW,CAACC,SAAS,CAACmD,IAAI,CAAC,CAAC,EAAE;QACtC,IAAI,CAACzC,MAAM,CAACV,SAAQ,GAAI,eAAe;QACvCkD,OAAM,GAAI,KAAK;MACjB;MAEA,IAAI,CAAC,IAAI,CAACnD,WAAW,CAACE,QAAQ,CAACkD,IAAI,CAAC,CAAC,EAAE;QACrC,IAAI,CAACzC,MAAM,CAACT,QAAO,GAAI,kBAAkB;QACzCiD,OAAM,GAAI,KAAK;MACjB;MAEA,OAAOA,OAAO;IAChB,CAAC;IAED,MAAME,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC,CAAC,EAAE;QACxB;MACF;MAEA,IAAI;QACF,IAAI,CAACxC,SAAQ,GAAI,IAAI;QACrBY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAACvB,WAAW,CAAC;QAErD,MAAMoC,QAAO,GAAI,MAAMxC,GAAG,CAAC0D,iBAAiB,CAAC;UAC3CrD,SAAS,EAAE,IAAI,CAACD,WAAW,CAACC,SAAS;UACrCC,QAAQ,EAAE,IAAI,CAACF,WAAW,CAACE,QAAQ;UACnCE,KAAK,EAAE,IAAI,CAACJ,WAAW,CAACI,KAAK;UAC7BC,OAAO,EAAE,IAAI,CAACL,WAAW,CAACK;QAC5B,CAAC,CAAC;QAEFiB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEa,QAAQ,CAACrC,IAAI,CAAC;;QAE9C;QACA0B,YAAY,CAACM,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC/B,WAAW,CAACC,SAAS,CAAC;QACjEwB,YAAY,CAACM,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC/B,WAAW,CAACE,QAAQ,CAAC;QAC/DuB,YAAY,CAACM,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC/B,WAAW,CAACI,KAAK,CAAC;QACzDqB,YAAY,CAACM,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC/B,WAAW,CAACK,OAAO,CAAC;QAE7D,IAAI,CAACoC,SAAS,CAAC,4BAA4B,EAAE,SAAS,CAAC;;QAEvD;QACA,MAAM,IAAI,CAACpB,gBAAgB,CAAC,CAAC;MAC/B,EAAE,OAAOmB,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACC,SAAS,CAAC,gDAAgD,EAAE,OAAO,CAAC;MAC3E,UAAU;QACR,IAAI,CAAC/B,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IAED6C,kBAAkBA,CAAA,EAAG;MACnB;MACA,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,MAAMC,kBAAkBA,CAACC,KAAK,EAAE;MAC9B,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAI,CAACF,IAAI,EAAE;;MAEX;MACA,IAAI,CAACA,IAAI,CAAC9C,IAAI,CAACa,UAAU,CAAC,QAAQ,CAAC,EAAE;QACnC,IAAI,CAACa,SAAS,CAAC,gCAAgC,EAAE,OAAO,CAAC;QACzD;MACF;;MAEA;MACA,MAAMuB,cAAa,GAAI,EAAC,GAAI,IAAG,GAAI,IAAI,EAAE;MACzC,IAAIH,IAAI,CAACI,IAAG,GAAID,cAAc,EAAE;QAC9B,IAAI,CAACvB,SAAS,CAAC,yBAAyB,CAACoB,IAAI,CAACI,IAAG,IAAK,IAAG,GAAI,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,uCAAuC,EAAE,OAAO,CAAC;QAC/H;MACF;;MAEA;MACA,IAAI,CAACxD,SAAQ,GAAI,IAAI;;MAErB;MACA,IAAI,CAAC+B,SAAS,CAAC,2BAA2B,EAAE,MAAM,CAAC;;MAEnD;MACA,MAAM0B,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAK,GAAI,MAAOC,CAAC,IAAK;QAC3B,IAAI;UACF,IAAIC,SAAQ,GAAID,CAAC,CAACR,MAAM,CAACU,MAAM;;UAE/B;UACA,IAAIX,IAAI,CAAC9C,IAAG,KAAM,YAAW,IAAK8C,IAAI,CAAC9C,IAAG,KAAM,WAAW,EAAE;YAC3D,IAAI,CAACwD,SAAS,CAAC3C,UAAU,CAAC,iBAAiB,CAAC,EAAE;cAC5C2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,iBAAiB,CAAC;YACxE;UACF,OAAO,IAAIZ,IAAI,CAAC9C,IAAG,KAAM,WAAU,IAAK,CAACwD,SAAS,CAAC3C,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC/E2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;UACvE,OAAO,IAAIZ,IAAI,CAAC9C,IAAG,KAAM,WAAU,IAAK,CAACwD,SAAS,CAAC3C,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC/E2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;UACvE,OAAO,IAAIZ,IAAI,CAAC9C,IAAG,KAAM,YAAW,IAAK,CAACwD,SAAS,CAAC3C,UAAU,CAAC,iBAAiB,CAAC,EAAE;YACjF2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,iBAAiB,CAAC;UACxE,OAAO,IAAIZ,IAAI,CAAC9C,IAAG,KAAM,eAAc,IAAK,CAACwD,SAAS,CAAC3C,UAAU,CAAC,oBAAoB,CAAC,EAAE;YACvF2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,oBAAoB,CAAC;UAC3E,OAAO,IAAIZ,IAAI,CAAC9C,IAAG,KAAM,WAAU,IAAK,CAACwD,SAAS,CAAC3C,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC/E2C,SAAQ,GAAIA,SAAS,CAACE,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;UACvE;;UAEA;UACA,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE;YAClCpD,OAAO,CAACkB,KAAK,CAAC,2BAA2B,CAAC;YAC1C,IAAI,CAACC,SAAS,CAAC,mDAAmD,EAAE,OAAO,CAAC;YAC5E,IAAI,CAAC/B,SAAQ,GAAI,KAAK;YACtB;UACF;;UAEA;UACA,IAAI,CAACD,iBAAgB,GAAI8D,SAAS;;UAElC;UACA,MAAM/C,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;UAC7C,IAAI,CAACF,MAAM,EAAE;YACXF,OAAO,CAACkB,KAAK,CAAC,kCAAkC,CAAC;YACjD,IAAI,CAACC,SAAS,CAAC,gDAAgD,EAAE,OAAO,CAAC;YACzE,IAAI,CAAC/B,SAAQ,GAAI,KAAK;YACtB;UACF;;UAEA;UACAe,YAAY,CAACM,OAAO,CAAC,qBAAqBP,MAAM,EAAE,EAAE+C,SAAS,CAAC;UAC9DjD,OAAO,CAACC,GAAG,CAAC,sDAAsDC,MAAM,EAAE,CAAC;;UAE3E;UACAK,cAAc,CAACE,OAAO,CAAC,sBAAsBP,MAAM,EAAE,EAAE+C,SAAS,CAAC;UACjEjD,OAAO,CAACC,GAAG,CAAC,wDAAwDC,MAAM,EAAE,CAAC;;UAE7E;UACA,MAAMmD,eAAc,GAAI,IAAIzC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UAC5CV,YAAY,CAACM,OAAO,CAAC,2BAA2BP,MAAM,EAAE,EAAEmD,eAAe,CAACC,QAAQ,CAAC,CAAC,CAAC;;UAErF;UACAC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,iBAAiB,CAAC,CAAC;;UAExD;UACA;UACA;UACA,IAAI;YACF,MAAM3C,QAAO,GAAI,MAAMxC,GAAG,CAACoF,oBAAoB,CAACT,SAAS,CAAC;YAE1D,IAAInC,QAAQ,CAACrC,IAAG,IAAKqC,QAAQ,CAACrC,IAAI,CAACU,iBAAiB,EAAE;cACpD,IAAI,CAACgC,SAAS,CAAC,gCAAgC,EAAE,SAAS,CAAC;YAC7D;UACF,EAAE,OAAOD,KAAK,EAAE;YACdlB,OAAO,CAACkB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;;YAExD;YACA,IAAI,CAACC,SAAS,CAAC,4CAA4C,EAAE,SAAS,CAAC;UACzE,UAAU;YACR;YACA,IAAI,CAAC/B,SAAQ,GAAI,KAAK;UACxB;QACF,EAAE,OAAO8B,KAAK,EAAE;UACdlB,OAAO,CAACkB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/C,IAAI,CAACC,SAAS,CAAC,wDAAwD,EAAE,OAAO,CAAC;UACjF,IAAI,CAAC/B,SAAQ,GAAI,KAAK;QACxB;MACF,CAAC;;MAED;MACAyD,MAAM,CAACc,OAAM,GAAI,MAAM;QACrB3D,OAAO,CAACkB,KAAK,CAAC,kBAAkB,CAAC;QACjC,IAAI,CAACC,SAAS,CAAC,kDAAkD,EAAE,OAAO,CAAC;QAC3E,IAAI,CAAC/B,SAAQ,GAAI,KAAK;MACxB,CAAC;MAEDyD,MAAM,CAACe,aAAa,CAACrB,IAAI,CAAC;IAC5B,CAAC;IAEDsB,YAAYA,CAAC7E,MAAM,EAAE;MACnB,IAAI,CAACA,MAAM,EAAE,OAAO,cAAc;MAElC,MAAM8E,SAAQ,GAAI;QAChB,SAAS,EAAE,aAAa;QACxB,WAAW,EAAE,oBAAoB;QACjC,UAAU,EAAE,SAAS;QACrB,SAAS,EAAE;MACb,CAAC;MAED,OAAOA,SAAS,CAAC9E,MAAM,CAAC+E,WAAW,CAAC,CAAC,KAAK/E,MAAM,CAACY,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIb,MAAM,CAACgF,KAAK,CAAC,CAAC,CAAC;IAC5F,CAAC;IAEDC,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,aAAa;MAErC,IAAI;QACF;QACA,MAAMC,IAAG,GAAI,IAAIvD,IAAI,CAACsD,UAAU,CAAC;;QAEjC;QACA,IAAIE,KAAK,CAACD,IAAI,CAACtD,OAAO,CAAC,CAAC,CAAC,EAAE;UACzB,OAAO,kBAAkB;QAC3B;;QAEA;QACA,MAAMwD,OAAM,GAAI;UACdC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,MAAM;UACbC,GAAG,EAAE,SAAS;UACdC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE;QACV,CAAC;;QAED;QACA,OAAOP,IAAI,CAACQ,kBAAkB,CAAC,OAAO,EAAEN,OAAO,IAAI,KAAK;MAC1D,EAAE,OAAOnD,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,OAAO,kBAAkB;MAC3B;IACF,CAAC;IAEDC,SAASA,CAAC3B,OAAO,EAAEC,IAAG,GAAI,SAAS,EAAE;MACnC,IAAI,CAACH,KAAI,GAAI;QACXC,IAAI,EAAE,IAAI;QACVC,OAAO;QACPC;MACF,CAAC;;MAED;MACAmF,UAAU,CAAC,MAAM;QACf,IAAI,CAACtF,KAAK,CAACC,IAAG,GAAI,KAAK;MACzB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IAEDsF,eAAeA,CAACC,GAAG,EAAE;MACnB,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;;MAEnB;MACA,IAAIA,GAAG,CAACxE,UAAU,CAAC,OAAO,CAAC,EAAE;QAC3B,OAAOwE,GAAG;MACZ;;MAEA;MACA,IAAIA,GAAG,CAACxE,UAAU,CAAC,GAAG,CAAC,EAAE;QACvB;QACA,MAAMK,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACtC;QACA,OAAO,GAAGiE,GAAG,MAAMnE,SAAS,EAAE;MAChC;;MAEA;MACA,IAAImE,GAAG,CAACxE,UAAU,CAAC,MAAM,CAAC,EAAE;QAC1B,OAAOwE,GAAG;MACZ;;MAEA;MACA,OAAOA,GAAG;IACZ,CAAC;IAEDC,gBAAgBA,CAAC/B,CAAC,EAAE;MAClB;MACA,IAAIA,CAAC,CAACR,MAAM,CAACwC,OAAO,CAACC,YAAY,EAAE;QACjC;QACA,IAAI,CAAC9F,iBAAgB,GAAI,IAAI;QAC7B;MACF;;MAEA;MACA6D,CAAC,CAACR,MAAM,CAACwC,OAAO,CAACC,YAAW,GAAI,MAAM;;MAEtC;MACA,MAAM/E,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;MAE7C;MACA;MACA,MAAMC,gBAAe,GAAIF,YAAY,CAACC,OAAO,CAAC,qBAAqBF,MAAM,EAAE,CAAC;MAC5E,IAAIG,gBAAe,IAAKA,gBAAgB,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;QAClEN,OAAO,CAACC,GAAG,CAAC,0CAA0CC,MAAM,EAAE,CAAC;QAC/D,IAAI,CAACf,iBAAgB,GAAIkB,gBAAgB;QACzC;MACF;;MAEA;MACA,MAAM6E,kBAAiB,GAAI3E,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC;MACjF,IAAIgF,kBAAiB,IAAKA,kBAAkB,CAAC5E,UAAU,CAAC,aAAa,CAAC,EAAE;QACtEN,OAAO,CAACC,GAAG,CAAC,+DAA+DC,MAAM,EAAE,CAAC;QACpF,IAAI,CAACf,iBAAgB,GAAI+F,kBAAkB;QAC3C;QACA/E,YAAY,CAACM,OAAO,CAAC,qBAAqBP,MAAM,EAAE,EAAEgF,kBAAkB,CAAC;QACvE;MACF;;MAEA;MACA,MAAMxE,gBAAe,GAAIP,YAAY,CAACC,OAAO,CAAC,2BAA2BF,MAAM,EAAE,CAAC;MAClF,IAAIQ,gBAAgB,EAAE;QACpB;QACA,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACtC,MAAMsE,MAAK,GAAI,GAAGzE,gBAAgB,MAAMC,SAAS,EAAE;QACnDX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkF,MAAM,CAAC;;QAEzC;QACA;QACA,IAAI,CAAChG,iBAAgB,GAAIgG,MAAM;QAC/B;MACF;;MAEA;MACA,MAAML,GAAE,GAAI9B,CAAC,CAACR,MAAM,CAAC4C,GAAG;MACxB,IAAIN,GAAG,CAAC1B,QAAQ,CAAC,WAAW,CAAC,EAAE;QAC7B,MAAMiC,SAAQ,GAAIP,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACrC,MAAMH,MAAK,GAAI,GAAGE,SAAS,CAACE,SAAS,CAACF,SAAS,CAACG,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE;QACvExF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEkF,MAAM,CAAC;;QAE9C;QACA,IAAI,CAAChG,iBAAgB,GAAIgG,MAAM;QAC/B;MACF;;MAEA;MACA,IAAI,CAAChG,iBAAgB,GAAI,IAAI;IAC/B;EACF,CAAC;EACDsG,OAAOA,CAAA,EAAG;IACR;IACA,MAAMvF,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;IAE7C;IACA,IAAIF,MAAM,EAAE;MACV,MAAMG,gBAAe,GAAIF,YAAY,CAACC,OAAO,CAAC,qBAAqBF,MAAM,EAAE,CAAC;MAC5E,IAAIG,gBAAe,IAAKA,gBAAgB,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;QAClEN,OAAO,CAACC,GAAG,CAAC,sDAAsDC,MAAM,EAAE,CAAC;QAC3E,IAAI,CAACf,iBAAgB,GAAIkB,gBAAgB;MAC3C;MACA;MAAA,KACK,IAAIE,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC,EAAE;QAC/DF,OAAO,CAACC,GAAG,CAAC,wEAAwEC,MAAM,EAAE,CAAC;QAC7F,MAAMM,WAAU,GAAID,cAAc,CAACH,OAAO,CAAC,sBAAsBF,MAAM,EAAE,CAAC;QAC1E,IAAI,CAACf,iBAAgB,GAAIqB,WAAW;QACpC;QACAL,YAAY,CAACM,OAAO,CAAC,qBAAqBP,MAAM,EAAE,EAAEM,WAAW,CAAC;MAClE;MACA;MAAA,KACK;QACH,MAAME,gBAAe,GAAIP,YAAY,CAACC,OAAO,CAAC,2BAA2BF,MAAM,EAAE,CAAC;QAClF,IAAIQ,gBAAgB,EAAE;UACpB,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UACtC,IAAI,CAAC1B,iBAAgB,GAAI,GAAGuB,gBAAgB,MAAMC,SAAS,EAAE;QAC/D;MACF;IACF;;IAEA;IACA,IAAI,CAACZ,gBAAgB,CAAC,CAAC;;IAEvB;IACA,IAAI,CAAC2F,oBAAmB,GAAI,MAAM;MAChC;MACA,MAAMxF,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC7C,IAAIF,MAAM,EAAE;QACV;QACA,MAAMG,gBAAe,GAAIF,YAAY,CAACC,OAAO,CAAC,qBAAqBF,MAAM,EAAE,CAAC;QAC5E,IAAIG,gBAAe,IAAKA,gBAAgB,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;UAClE,IAAI,CAACnB,iBAAgB,GAAIkB,gBAAgB;QAC3C;MACF;IACF,CAAC;IAEDkD,MAAM,CAACoC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAACD,oBAAoB,CAAC;EACvE,CAAC;EAEDE,aAAaA,CAAA,EAAG;IACd;IACA,IAAI,IAAI,CAACF,oBAAoB,EAAE;MAC7BnC,MAAM,CAACsC,mBAAmB,CAAC,iBAAiB,EAAE,IAAI,CAACH,oBAAoB,CAAC;IAC1E;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}